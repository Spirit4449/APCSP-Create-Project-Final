(()=>{"use strict";var e,t,n,a,o={915:(e,t,n)=>{n.d(t,{$E:()=>a}),e=n.hmd(e);var a={ninja:{baseHealth:8e3,attackDescription:"Unleashes a shuriken that boomerangs back.",baseDamage:1e3,ammoCooldownMs:200,ammoReloadMs:1400,ammoCapacity:1,specialDescription:"Dashes forward, releasing a flurry of shurikens.",specialBaseDamage:2e3,specialChargeHits:3,spriteScale:1,body:{widthShrink:35,heightShrink:10,offsetXFromHalf:0,offsetY:10},description:"A swift and agile fighter.",free:!0},thorg:{baseHealth:13e3,attackDescription:"Swings a heavy axe in a short arc, pushing back nearby enemies.",baseDamage:1800,ammoCooldownMs:350,ammoReloadMs:1e3,ammoCapacity:3,specialDescription:"Slams the ground to send a shockwave forward.",specialBaseDamage:2800,specialChargeHits:4,spriteScale:.7,body:{widthShrink:30,heightShrink:8,offsetXFromHalf:-43,offsetY:8},description:"A sturdy frontline bruiser with crushing blows.",free:!0},draven:{baseHealth:6e3,attackDescription:"Puffs out a magical smoke that deals splash baseDamage to everyone in the path.",baseDamage:1800,ammoCooldownMs:250,ammoReloadMs:1700,ammoCapacity:3,specialDescription:"Unleashes a staff nova that expands outward.",specialBaseDamage:2400,specialChargeHits:3,spriteScale:1.2,body:{widthShrink:220,heightShrink:195,offsetXFromHalf:90,offsetY:113,flipOffset:5},description:"A dark sorcerer who manipulates shadows.",unlockPrice:280}};e.exports&&(e.exports={DEFAULT_CHARACTER:"ninja",LEVEL_CAP:5,characterStats:a,defaultCharacterList:function(){return Object.fromEntries(Object.keys(a).map(function(e){return[e,a[e].free?1:0]}))},upgradePrice:function(e){return 200*Math.pow(2,e-1)},unlockPrice:function(e){return a[e].unlockPrice||void 0}})}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var n=r[e]={id:e,loaded:!1,exports:{}};return o[e](n,n.exports,i),n.loaded=!0,n.exports}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=Array(t);n<t;n++)a[n]=e[n];return a}i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var l,c,u,h,p,f,d,m,y,v,g=[],b=[];const w=window.io({withCredentials:!0,autoConnect:!0});var x=i(915);function S(e){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S(e)}function P(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,k(a.key),a)}}function k(e){var t=function(e){if("object"!=S(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=S(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==S(t)?t:t+""}function M(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(M=function(){return!!e})()}function j(e){return j=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},j(e)}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function T(e,t){return T=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},T(e,t)}var C=function(){function e(t,n,a,o){var r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),(r=function(e,t,n){return t=j(t),function(e,t){if(t&&("object"==S(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return O(e)}(e,M()?Reflect.construct(t,n||[],j(e).constructor):t.apply(e,n))}(this,e,[t,n.x,n.y,"shuriken"])).ownerSprite=a,r.cfg=Object.assign({direction:1,forwardDistance:520,outwardDuration:600,returnSpeed:580,rotationSpeed:950,scale:.1,damage:1e3,username:"",gameId:"",isOwner:!1,maxLifetime:7e3,hitCooldown:300},o||{}),r.phase="outward",r.elapsed=0,r.totalElapsed=0,r.hoverDuration=100,r.returnAcceleration=800,r.currentReturnSpeed=.08*r.cfg.returnSpeed,r.hitTimestamps={},r.trailInterval=30,r.trailAccum=0,r.trails=[],r.maxTrails=40,t.add.existing(O(r)),t.physics.add.existing(O(r)),r.setScale(r.cfg.scale),r.body.allowGravity=!1,r.setDepth(5),r.setAngularVelocity(r.cfg.rotationSpeed*r.cfg.direction),r.startX=n.x,r.startY=n.y,r.endX=r.startX+r.cfg.direction*r.cfg.forwardDistance,r.endY=r.startY,r.ctrl1X=r.startX+r.cfg.direction*r.cfg.forwardDistance*.25,r.ctrl1Y=r.startY+20,r.ctrl2X=r.startX+r.cfg.direction*r.cfg.forwardDistance*.6,r.ctrl2Y=r.startY-40;var i=r.cfg.isOwner?3054591:16726574;return r.glow=t.add.graphics(),r.glow.setDepth(r.depth-1),r.glow.setBlendMode(Phaser.BlendModes.ADD),r._drawGlow(i),t.tweens.add({targets:r.glow,scale:{from:.95,to:1.15},alpha:{from:.9,to:.55},duration:600,repeat:-1,yoyo:!0,ease:"Sine.easeInOut"}),r.scene.events.on("update",r.updateShuriken,O(r)),r}var t,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&T(e,t)}(e,Phaser.Physics.Arcade.Image),t=e,n=[{key:"_drawGlow",value:function(e){var t=85*this.cfg.scale,n=.42*t,a=.9*t,o=1.2*t,r=Phaser.Display.Color.IntegerToColor(e);this.glow.clear(),this.glow.x=this.x,this.glow.y=this.y,this.glow.fillStyle(r.color,.42),this.glow.fillCircle(0,0,o),this.glow.fillStyle(r.color,.72),this.glow.fillCircle(0,0,a),this.glow.fillStyle(r.color,.95),this.glow.fillCircle(0,0,n)}},{key:"cubic",value:function(e,t,n,a,o){var r=1-e;return r*r*r*t+3*r*r*e*n+3*r*e*e*a+e*e*e*o}},{key:"tryDamage",value:function(e){if(!this.cfg.isOwner)return!1;if(!e)return!1;var t=e.username||e._username||e.name||"unknown",n=this.scene.time.now;if(n-(this.hitTimestamps[t]||0)<this.cfg.hitCooldown)return!1;this.hitTimestamps[t]=n,w.emit("hit",{attacker:this.cfg.username,target:t,damage:this.cfg.damage,gameId:this.cfg.gameId});try{this.scene.sound.play("shurikenHit",{volume:.1,rate:1})}catch(e){}return!0}},{key:"attachEnemyOverlap",value:function(e){var t=this;e.forEach(function(e){if(e){var n=e.opponent||e;t.scene.physics.add.overlap(t,n,function(){e.opponent&&t.tryDamage(e)})}})}},{key:"attachMapOverlap",value:function(){}},{key:"spawnTrail",value:function(){var e=this.scene.add.image(this.x,this.y,"shuriken");if(e.setScale(.4*this.cfg.scale),e.setDepth(4),e.alpha=.35,this.scene.tweens.add({targets:e,alpha:0,scale:{from:e.scale,to:.15*e.scale},duration:300,ease:"Cubic.easeOut",onComplete:function(){return e.destroy()}}),this.trails.push(e),this.trails.length>this.maxTrails){var t=this.trails.shift();t&&t.destroy&&t.destroy()}}},{key:"destroyShuriken",value:function(){this.scene&&(this.scene.events.off("update",this.updateShuriken,this),this.trails.forEach(function(e){return e&&e.destroy&&e.destroy()}),this.trails.length=0,this.glow&&this.glow.destroy&&this.glow.destroy(),this.destroy())}},{key:"updateShuriken",value:function(e,t){if(this.active)if(this.elapsed+=t,this.totalElapsed+=t,this.trailAccum+=t,this.trailAccum>=this.trailInterval&&(this.spawnTrail(),this.trailAccum=0),this.totalElapsed>this.cfg.maxLifetime)this.destroyShuriken();else{if("outward"===this.phase){var n=Phaser.Math.Clamp(this.elapsed/this.cfg.outwardDuration,0,1),a=(1-Math.cos(Math.PI*n))/2,o=this.cubic(a,this.startX,this.ctrl1X,this.ctrl2X,this.endX),r=this.cubic(a,this.startY,this.ctrl1Y,this.ctrl2Y,this.endY);this.setPosition(o,r),n>=1&&(this.phase="hover",this.elapsed=0,this.setAngularVelocity(.55*this.cfg.rotationSpeed*this.cfg.direction))}else if("hover"===this.phase)this.elapsed>=this.hoverDuration&&(this.phase="return",this.elapsed=0,this.setAngularVelocity(1.15*this.cfg.rotationSpeed*this.cfg.direction));else if("return"===this.phase)if(this.ownerSprite&&this.ownerSprite.active){var i=this.ownerSprite.x-this.x,s=this.ownerSprite.y-this.y,l=Math.sqrt(i*i+s*s)||1;this.currentReturnSpeed=Math.min(this.cfg.returnSpeed,this.currentReturnSpeed+this.returnAcceleration*(t/1e3));var c=this.currentReturnSpeed*(t/1e3);if(this.setPosition(this.x+i/l*c,this.y+s/l*c),l<30){if(this.cfg.isOwner&&this.onReturn&&"function"==typeof this.onReturn)try{this.onReturn()}catch(e){}return void this.destroyShuriken()}}else this.x+=this.cfg.direction*(this.currentReturnSpeed*(t/1e3));this.glow&&(this.glow.x=this.x,this.glow.y=this.y)}}}],n&&P(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function D(e){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D(e)}function I(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,A(a.key),a)}}function A(e){var t=function(e){if("object"!=D(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=D(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==D(t)?t:t+""}var B,R,E,H="ninja",_=function(){function e(t){var n=t.scene,a=t.player,o=t.username,r=t.gameId,i=t.opponentPlayersRef,s=t.mapObjects,l=t.ammoHooks;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=n,this.player=a,this.username=o,this.gameId=r,this.opponentPlayersRef=i,this.mapObjects=s,this.ammo=l}var t,n,a;return t=e,n=[{key:"attachInput",value:function(){var e=this;this.scene.input.on("pointerdown",function(){return e.handlePointerDown()})}},{key:"performDefaultAttack",value:function(e,t){var n=this.ammo,a=n.getAmmoCooldownMs,o=n.tryConsume,r=n.setCanAttack,i=n.setIsAttacking,s=n.drawAmmoBar;if(!o())return!1;r(!1),i(!0);var l=a();this.scene.time.delayedCall(l,function(){return r(!0)}),setTimeout(function(){return i(!1)},300);var c="function"==typeof e?e():null;return c&&w.emit("attack",c),s(),"function"==typeof t&&t(),!0}},{key:"handlePointerDown",value:function(){var e=this,t=this.player,n=t.flipX?-1:1,a=(this.constructor.getStats&&this.constructor.getStats()||{}).damage,o=this.performDefaultAttack(function(){var o=e.scene.sound.add("shurikenThrow");o.setVolume(.1),o.setRate(1.3),o.play(),e.scene.anims&&(e.scene.anims.exists("".concat(H,"-throw"))||e.scene.anims.exists("throw"))&&t.anims.play(e.scene.anims.exists("".concat(H,"-throw"))?"".concat(H,"-throw"):"throw",!0);var r={direction:n,username:e.username,gameId:e.gameId,isOwner:!0,damage:a,rotationSpeed:2e3,forwardDistance:500,arcHeight:160,outwardDuration:380,returnSpeed:900},i=new C(e.scene,{x:t.x,y:t.y},t,r),s=Object.values(e.opponentPlayersRef||{});i.attachEnemyOverlap(s),i.attachMapOverlap(e.mapObjects);var l=e.ammo,c=l.grantCharge,u=l.setCanAttack,h=l.drawAmmoBar;return i.onReturn=function(){c(1),u(!0),h()},{x:t.x,y:t.y,scale:r.scale||.1,damage:r.damage,name:e.username,returning:!0,direction:n,forwardDistance:r.forwardDistance,outwardDuration:r.outwardDuration,returnSpeed:r.returnSpeed,rotationSpeed:r.rotationSpeed}});return o}}],a=[{key:"getTextureKey",value:function(){return e.textureKey}},{key:"preload",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/assets";e.load.atlas(H,"".concat(t,"/").concat(H,"/spritesheet.png"),"".concat(t,"/").concat(H,"/animations.json")),e.load.image("shuriken","".concat(t,"/").concat(H,"/shuriken.png")),e.load.audio("shurikenThrow","".concat(t,"/").concat(H,"/shurikenThrow.mp3")),e.load.audio("shurikenHit","".concat(t,"/").concat(H,"/hit.mp3")),e.load.audio("shurikenHitWood","".concat(t,"/").concat(H,"/woodhit.wav"))}},{key:"setupAnimations",value:function(e){!function(e){e.anims.exists("ninja-running")||e.anims.create({key:"ninja-running",frames:e.anims.generateFrameNames("ninja",{prefix:"running",end:5,zeroPad:2}),frameRate:20,repeat:0}),e.anims.exists("ninja-idle")||e.anims.create({key:"ninja-idle",frames:e.anims.generateFrameNames("ninja",{prefix:"idle",end:4,zeroPad:2}),frameRate:3,repeat:-1}),e.anims.exists("ninja-jumping")||e.anims.create({key:"ninja-jumping",frames:e.anims.generateFrameNames("ninja",{prefix:"jumping",end:7,zeroPad:2}),frameRate:20,repeat:0}),e.anims.exists("ninja-sliding")||e.anims.create({key:"ninja-sliding",frames:e.anims.generateFrameNames("ninja",{prefix:"wall",end:0,zeroPad:2}),frameRate:20,repeat:2}),e.anims.exists("ninja-falling")||e.anims.create({key:"ninja-falling",frames:e.anims.generateFrameNames("ninja",{prefix:"falling",end:2,zeroPad:2}),frameRate:20,repeat:0}),e.anims.exists("ninja-throw")||e.anims.create({key:"ninja-throw",frames:e.anims.generateFrameNames("ninja",{prefix:"throw",end:3,zeroPad:2}),frameRate:15,repeat:0}),e.anims.exists("ninja-dying")||e.anims.create({key:"ninja-dying",frames:e.anims.generateFrameNames("ninja",{prefix:"dying",end:3,zeroPad:2}),frameRate:10,repeat:0})}(e)}},{key:"getStats",value:function(){return x.$E.ninja}},{key:"handleRemoteAttack",value:function(e,t,n){if(t.returning){var a=n?n.opponent:null;return new C(e,{x:t.x,y:t.y},a,{direction:t.direction,forwardDistance:t.forwardDistance||500,outwardDuration:t.outwardDuration||380,returnSpeed:t.returnSpeed||900,rotationSpeed:t.rotationSpeed||2e3,scale:t.scale||.1,damage:t.damage,isOwner:!1}),!0}var o=e.physics.add.image(t.x,t.y,t.weapon||"shuriken");return o.setScale(t.scale||.1),o.setVelocity(400*(t.direction||1),0),o.setAngularVelocity(t.rotationSpeed||600),o.body.allowGravity=!1,!0}}],n&&I(t.prototype,n),a&&I(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}();B=_,E=H,(R=A(R="textureKey"))in B?Object.defineProperty(B,R,{value:E,enumerable:!0,configurable:!0,writable:!0}):B[R]=E;const F=_;function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=Array(t);n<t;n++)a[n]=e[n];return a}function N(e){var t="thorg",n=e.textures.get(t),a=n&&n.getFrameNames()||[],o=(new Map(a.map(function(e){return[e.toLowerCase(),e]})),function(n,o,r,i){if(!e.anims.exists(n)){var s=function(e){var t,n=[],o=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return X(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?X(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0,o=function(){};return{s:o,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw r}}}}(a);try{var r=function(){var a=t.value,o=a.toLowerCase();e.some(function(e){return o.startsWith(e)})&&n.push(a)};for(o.s();!(t=o.n()).done;)r()}catch(e){o.e(e)}finally{o.f()}return n.sort(function(e,t){var n=/(\d+)(?=\D*$)/.exec(e),a=/(\d+)(?=\D*$)/.exec(t);return n&&a?parseInt(n[1],10)-parseInt(a[1],10):e.localeCompare(t)}),n}(o);s.length&&e.anims.create({key:n,frames:s.map(function(e){return{key:t,frame:e}}),frameRate:r,repeat:i})}});o("".concat(t,"-running"),["running","run"],20,0),o("".concat(t,"-idle"),["idle","stand","idle_"],5,-1),o("".concat(t,"-jumping"),["jumping","jump"],20,0),o("".concat(t,"-sliding"),["wall","slide","sliding"],20,2),o("".concat(t,"-falling"),["falling","fall"],20,0),o("".concat(t,"-throw"),["throw","attack","attack_throw"],15,0),o("".concat(t,"-dying"),["dying","death","dead"],10,0)}function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function G(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,U(a.key),a)}}function U(e){var t=function(e){if("object"!=L(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=L(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==L(t)?t:t+""}var Y="thorg",V=function(){function e(t){var n=t.scene,a=t.player,o=t.username,r=t.gameId,i=t.opponentPlayersRef,s=t.mapObjects,l=t.ammoHooks;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=n,this.player=a,this.username=o,this.gameId=r,this.opponentPlayersRef=i,this.mapObjects=s,this.ammo=l}return function(e,t,n){t&&G(e.prototype,t),n&&G(e,n),Object.defineProperty(e,"prototype",{writable:!1})}(e,[{key:"attachInput",value:function(){var e=this;this.scene.input.on("pointerdown",function(){return e.handlePointerDown()})}},{key:"performDefaultAttack",value:function(e,t){var n=this.ammo,a=n.getAmmoCooldownMs,o=n.tryConsume,r=n.setCanAttack,i=n.setIsAttacking,s=n.drawAmmoBar;if(!o())return!1;i(!0),r(!1);var l=a();this.scene.time.delayedCall(l,function(){return r(!0)}),setTimeout(function(){return i(!1)},250);var c="function"==typeof e?e():null;return c&&w.emit("attack",c),s(),"function"==typeof t&&t(),!0}},{key:"handlePointerDown",value:function(){var t=this,n=this.player,a=n.flipX?-1:1,o=(this.constructor.getStats&&this.constructor.getStats()||{}).damage;return this.performDefaultAttack(function(){t.scene.anims&&(t.scene.anims.exists("".concat(Y,"-throw"))||t.scene.anims.exists("throw"))&&n.anims.play(t.scene.anims.exists("".concat(Y,"-throw"))?"".concat(Y,"-throw"):"throw",!0),e._spawnSlashEffect(t.scene,n,a,90,220);var r=new Set,i=Object.values(t.opponentPlayersRef||{}),s=.2*n.height,l=function(){return n.x+(a>=0?10:-10)},c=Phaser.Math.DegToRad(a>=0?-60:240),u=Phaser.Math.DegToRad(a>=0?60:120),h={t:0};return t.scene.tweens.add({targets:h,t:1,duration:220,ease:"Sine.easeOut",onUpdate:function(){for(var e=Phaser.Math.Linear(c,u,h.t),p=l()+a*Math.cos(e)*90,f=n.y-s+Math.sin(e)*Math.round(54),d=0,m=i;d<m.length;d++){var y=m[d],v=y&&y.opponent,g=y&&y.username;if(v&&g&&!r.has(g)){var b=v.x-l();Math.hypot(v.x-p,v.y-f)<=38&&Math.sign(b)===Math.sign(a)&&(r.add(g),w.emit("hit",{attacker:t.username,target:g,damage:o,gameId:t.gameId}))}}}}),{name:t.username,type:"".concat(Y,"-slash"),direction:a,range:90,duration:220}})}}],[{key:"getTextureKey",value:function(){return e.textureKey}},{key:"preload",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/assets";e.load.atlas(Y,"".concat(t,"/").concat(Y,"/spritesheet.png"),"".concat(t,"/").concat(Y,"/animations.json"))}},{key:"setupAnimations",value:function(e){N(e)}},{key:"handleRemoteAttack",value:function(t,n,a){if(n.type!=="".concat(Y,"-slash"))return!1;var o=a?a.opponent:null;return!o||(e._spawnSlashEffect(t,o,n.direction,n.range,n.duration),!0)}},{key:"_spawnSlashEffect",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:20,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:300,r=e.textures.exists("".concat(Y,"-weapon")),i=.1*t.height,s=function(){return t.x+(n>=0?10:-10)},l=function(){return t.y-i},c=a,u=Math.round(.6*a),h=Phaser.Math.DegToRad(-90),p=Phaser.Math.DegToRad(90);if(r){var f=e.add.image(s(),l(),"".concat(Y,"-weapon"));f.setDepth(6),f.setScale(.9),f.setOrigin(n>=0?.1:.9,.5),f.setFlipX(n<0);var d={t:0};return e.tweens.add({targets:d,t:1,duration:o,ease:"Sine.easeOut",onUpdate:function(){var e=Phaser.Math.Linear(h,p,d.t),t=Math.cos(e),a=Math.sin(e);f.x=s()+n*c*t,f.y=l()+u*a;var o=Math.atan2(u*Math.cos(e),-n*c*Math.sin(e));f.rotation=o},onComplete:function(){f.destroy()}})}var m=e.add.graphics();m.setDepth(5),m.setBlendMode(Phaser.BlendModes.ADD);var y=Math.max(14,Math.round(.22*a)),v=Math.max(6,c-y),g=Math.max(4,u-Math.round(.75*y)),b=function(e,t,a){return{x:s()+n*t*Math.cos(e),y:l()+a*Math.sin(e)}},w={t:0},x=18;return e.tweens.add({targets:w,t:1,duration:o,ease:"Sine.easeOut",onUpdate:function(){var e=Phaser.Math.Linear(h,p,w.t),t=Phaser.Math.Linear(h,e,Math.max(0,w.t-.25));m.clear(),m.fillStyle(10408447,.85),m.beginPath();for(var n=0;n<=x;n++){var a=Phaser.Math.Linear(t,e,n/x),o=b(a,c,u);0===n?m.moveTo(o.x,o.y):m.lineTo(o.x,o.y)}for(var r=x;r>=0;r--){var i=Phaser.Math.Linear(t,e,r/x),s=b(i,v,g);m.lineTo(s.x,s.y)}m.closePath(),m.fillPath(),m.lineStyle(Math.max(2,Math.floor(.3*y)),15005183,.9),m.beginPath();for(var l=0;l<=x;l++){var f=Phaser.Math.Linear(Math.max(t,e-.25),e,l/x),d=b(f,c+2,u+1);0===l?m.moveTo(d.x,d.y):m.lineTo(d.x,d.y)}m.strokePath()},onComplete:function(){return m.destroy()}})}},{key:"getStats",value:function(){return x.$E.thorg}}]),e}();!function(e,t,n){(t=U(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(V,"textureKey",Y);const K=V;function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=Array(t);n<t;n++)a[n]=e[n];return a}function $(e){var t="draven",n=e.textures.get(t),a=n&&n.getFrameNames()||[],o=(new Map(a.map(function(e){return[e.toLowerCase(),e]})),function(n,o,r,i){if(!e.anims.exists(n)){var s=function(e){var t,n=[],o=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return W(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?W(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0,o=function(){};return{s:o,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw r}}}}(a);try{var r=function(){var a=t.value,o=a.toLowerCase();e.some(function(e){return o.startsWith(e)})&&n.push(a)};for(o.s();!(t=o.n()).done;)r()}catch(e){o.e(e)}finally{o.f()}return n.sort(function(e,t){var n=/(\d+)(?=\D*$)/.exec(e),a=/(\d+)(?=\D*$)/.exec(t);return n&&a?parseInt(n[1],10)-parseInt(a[1],10):e.localeCompare(t)}),n}(o);s.length&&e.anims.create({key:n,frames:s.map(function(e){return{key:t,frame:e}}),frameRate:r,repeat:i})}});o("".concat(t,"-running"),["running","run"],20,0),o("".concat(t,"-idle"),["idle","stand","idle_"],3,-1),o("".concat(t,"-jumping"),["jumping","jump"],20,0),o("".concat(t,"-sliding"),["wall","slide","sliding"],20,2),o("".concat(t,"-falling"),["falling","fall"],20,0),o("".concat(t,"-throw"),["throw","attack","attack_throw"],15,0),o("".concat(t,"-dying"),["dying","death","dead"],10,0)}function z(e){return z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},z(e)}function q(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,J(a.key),a)}}function J(e){var t=function(e){if("object"!=z(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=z(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==z(t)?t:t+""}var Q=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.sprite=n,this._timer=0,this._interval=45,this._pool=[],this._poolMax=60}return function(e,t){t&&q(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1})}(e,[{key:"_acquire",value:function(){var e=this._pool.find(function(e){return!e.active});return e||(e=this.scene.add.graphics(),this._pool.push(e)),e.active=!0,e.clear(),e.setDepth(0),e}},{key:"_release",value:function(e){if(e.active=!1,e.alpha=1,e.scale=1,e.clear(),this._pool.length>this._poolMax){var t=this._pool.find(function(e){return!e.active});if(t){t.destroy();var n=this._pool.indexOf(t);n>=0&&this._pool.splice(n,1)}}}},{key:"_spawnFlame",value:function(e,t){var n=this,a=this._acquire(),o=Phaser.Math.Between(5,9);a.fillStyle(3221569,.35),a.fillCircle(0,0,o),a.fillStyle(12213538,.55),a.fillCircle(0,0,.65*o),a.fillStyle(Phaser.Display.Color.GetColor(49,Phaser.Math.Between(30,60),60),.9),a.fillCircle(0,0,.35*o),a.x=e+Phaser.Math.Between(-3,3),a.y=t+Phaser.Math.Between(-3,3);var r=Phaser.Math.Between(-12,12),i=Phaser.Math.Between(-18,-4),s=Phaser.Math.FloatBetween(.15,.35),l=Phaser.Math.Between(260,420);a.scale=1,this.scene.tweens.add({targets:a,x:a.x+r,y:a.y+i,scale:s,alpha:0,duration:l,ease:"Cubic.easeOut",onComplete:function(){return n._release(a)}})}},{key:"update",value:function(e,t,n){if(this.sprite&&!n&&t&&(this._timer+=e,this._timer>=this._interval)){this._timer=0;for(var a=this.sprite.x-(this.sprite.flipX?-14:14),o=this.sprite.y+8,r=Phaser.Math.Between(1,2),i=0;i<r;i++)this._spawnFlame(a,o)}}}]),e}();function Z(e){return Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Z(e)}function ee(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,ne(a.key),a)}}function te(e,t,n){return(t=ne(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ne(e){var t=function(e){if("object"!=Z(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Z(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Z(t)?t:t+""}var ae="draven",oe=function(){function e(t){var n=t.scene,a=t.player,o=t.username,r=t.gameId,i=t.opponentPlayersRef,s=t.mapObjects,l=t.ammoHooks;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=n,this.player=a,this.username=o,this.gameId=r,this.opponentPlayersRef=i,this.mapObjects=s,this.ammo=l}return function(e,t,n){t&&ee(e.prototype,t),n&&ee(e,n),Object.defineProperty(e,"prototype",{writable:!1})}(e,[{key:"attachInput",value:function(){var e=this;this.scene.input.on("pointerdown",function(){return e.handlePointerDown()})}},{key:"performDefaultAttack",value:function(e,t){var n=this.ammo,a=n.getAmmoCooldownMs,o=n.tryConsume,r=n.setCanAttack,i=n.setIsAttacking,s=n.drawAmmoBar;if(!o())return!1;i(!0),r(!1);var l=a();this.scene.time.delayedCall(l,function(){return r(!0)}),setTimeout(function(){return i(!1)},250);var c="function"==typeof e?e():null;return c&&w.emit("attack",c),s(),"function"==typeof t&&t(),!0}},{key:"handlePointerDown",value:function(){var e=this,t=this.player,n=t.flipX?-1:1,a=(this.constructor.getStats&&this.constructor.getStats()||{}).damage;return this.performDefaultAttack(function(){e.scene.anims&&(e.scene.anims.exists("".concat(ae,"-throw"))||e.scene.anims.exists("throw"))&&t.anims.play(e.scene.anims.exists("".concat(ae,"-throw"))?"".concat(ae,"-throw"):"throw",!0);var o=e.scene.add.graphics();o.setDepth(5),o.setBlendMode(Phaser.BlendModes.ADD);var r=Math.max(12,Math.round(18.9)),i=Math.round(.55*105),s=Math.max(4,105-r),l=Math.max(3,i-Math.round(.7*r)),c=function(){return t.x+(n>=0?20:-20)},u=function(){return t.y-.15*t.height},h=function(e,t,a){return{x:c()+n*t*Math.cos(e),y:u()+a*Math.sin(e)}},p=Phaser.Math.DegToRad(-80),f=Phaser.Math.DegToRad(80),d={t:0},m=18;e.scene.tweens.add({targets:d,t:1,duration:260,ease:"Sine.easeOut",onUpdate:function(){var e=Phaser.Math.Linear(p,f,d.t),t=Phaser.Math.Linear(p,e,Math.max(0,d.t-.25));o.clear(),o.fillStyle(16769694,.85),o.beginPath();for(var n=0;n<=m;n++){var a=Phaser.Math.Linear(t,e,n/m),c=h(a,105,i);0===n?o.moveTo(c.x,c.y):o.lineTo(c.x,c.y)}for(var u=m;u>=0;u--){var y=Phaser.Math.Linear(t,e,u/m),v=h(y,s,l);o.lineTo(v.x,v.y)}o.closePath(),o.fillPath(),o.lineStyle(Math.max(2,Math.floor(.3*r)),16774865,.9),o.beginPath();for(var g=0;g<=m;g++){var b=Phaser.Math.Linear(Math.max(t,e-.25),e,g/m),w=h(b,107,i+1);0===g?o.moveTo(w.x,w.y):o.lineTo(w.x,w.y)}o.strokePath()},onComplete:function(){return o.destroy()}});var y=new Set,v=Object.values(e.opponentPlayersRef||{}),g=function(){return c()+105*n},b=function(){return u()};return e.scene.time.delayedCall(Math.floor(130),function(){for(var t=0,o=v;t<o.length;t++){var r=o[t],i=r&&r.opponent,s=r&&r.username;if(i&&s&&!y.has(s)){var l=Phaser.Math.Distance.Between(i.x,i.y,g(),b()),u=i.x-c();l<=50&&Math.sign(u)===Math.sign(n)&&(y.add(s),w.emit("hit",{attacker:e.username,target:s,damage:a,gameId:e.gameId}))}}}),{name:e.username,type:"".concat(ae,"-slash"),direction:n,range:105,duration:260}})}}],[{key:"getTextureKey",value:function(){return e.textureKey}},{key:"preload",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/assets";e.load.atlas(ae,"".concat(t,"/").concat(ae,"/spritesheet.png"),"".concat(t,"/").concat(ae,"/animations.json")),e.load.on(Phaser.Loader.Events.COMPLETE,function(){var t=e.textures.get(ae);t&&t.source&&t.source[0]&&t.source[0].glTexture&&t.setFilter(Phaser.Textures.FilterMode.NEAREST),e.game&&e.game.config&&(e.game.config.pixelArt=!0,e.game.config.antialias=!1)})}},{key:"setupAnimations",value:function(e){$(e)}},{key:"handleRemoteAttack",value:function(e,t,n){}},{key:"getStats",value:function(){return x.$E.draven}}]),e}();te(oe,"textureKey",ae),te(oe,"Effects",Q);var re={ninja:F,thorg:K,draven:oe};function ie(e){var t=re[e];return t&&(t.textureKey||"function"==typeof t.getTextureKey&&t.getTextureKey())||"sprite"}function se(e,t,n){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"idle",o=(t||"").toLowerCase(),r=e&&e.anims;if(!r)return n;if(n&&n.includes("-")){if(n.toLowerCase().startsWith("".concat(o,"-"))&&r.exists(n))return n;var i=n.split("-").slice(1).join("-"),s="".concat(o,"-").concat(i);if(r.exists(s))return s;if(r.exists(n))return n}var l="".concat(o,"-").concat(n);if(r.exists(l))return l;if(r.exists(n))return n;var c="".concat(o,"-").concat(a);return r.exists(c)?c:r.exists(a)?a:n}function le(e){return x.$E[e]||x.$E.ninja}function ce(e){var t=re[e];return t&&(t.Effects||"function"==typeof t.getEffects&&t.getEffects())||null}var ue,he,pe=[];function fe(e,t,n){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:12303291,o=pe.find(function(e){return!e.active});o||(o=e.add.graphics(),pe.push(o)),o.active=!0,o.clear(),o.setDepth(1);var r=Phaser.Math.Between(6,10),i=Phaser.Math.FloatBetween(.45,.65),s=Phaser.Display.Color.IntegerToColor(a);o.fillStyle(s.color,.6*i),o.fillCircle(0,0,r),o.fillStyle(s.color,i),o.fillCircle(0,0,.55*r),o.x=t+Phaser.Math.Between(-4,4),o.y=n+Phaser.Math.Between(-2,2);var l=Phaser.Math.Between(10,22),c=Phaser.Math.Between(-12,12),u=Phaser.Math.FloatBetween(1.2,1.6),h=Phaser.Math.Between(380,520);if(o.scale=1,o.alpha=i,e.tweens.add({targets:o,x:o.x+c,y:o.y-l,alpha:0,scale:u,duration:h,ease:"Cubic.easeOut",onComplete:function(){o.active=!1,o.alpha=1,o.scale=1,o.clear()}}),pe.length>120){var p=pe.find(function(e){return!e.active});if(p){p.destroy();var f=pe.indexOf(p);f>=0&&pe.splice(f,1)}}}var de,me,ye,ve,ge,be,we,xe,Se,Pe,ke,Me,je,Oe,Te,Ce,De=!0,Ie=!1,Ae=!1,Be=!1,Re=!0,Ee=0,He=!1,_e=8e3,Fe=8e3,Xe=!1,Ne=1200,Le=1200,Ge=1,Ue=1,Ye=0,Ve=0,Ke=window.location.pathname.split("/").filter(Boolean).pop(),We=0,$e=null,ze=null,qe=null;function Je(){Fe<=0&&(Fe=0);var e=Fe/_e*60;me.clear();var t=ue.x-30,n=(ue.body?ue.body.y:ue.y-ue.height/2)-20;Xe?(ye.setText("0"),be.setPosition(ue.x,be.y+30)):ye.setText("".concat(Fe)),me.fillStyle(5855577),me.fillRect(t,n,60,9),me.lineStyle(3,0),me.strokeRoundedRect(t,n,60,9,3),me.fillStyle(10070828),me.fillRoundedRect(t,n,e,9,3),ye.setPosition(ue.x-ye.width/2,n-8),ye.setDepth(2),Qe(t,n+11)}function Qe(e,t){if(ve&&ge){var n=void 0!==e?e:ue.x-30,a=ue.body?ue.body.y:ue.y-ue.height/2,o=void 0!==t?t:a-9;ge.clear(),ve.clear(),ge.fillStyle(2236962,.65),ge.fillRoundedRect(n,o,60,6,3),ge.lineStyle(2,0,.9),ge.strokeRoundedRect(n,o,60,6,3);for(var r=(60-2*(Ge-1))/Ge,i=0;i<Ge;i++){var s,l=n+i*(r+2),c=(s=i<Ue?1:i===Ue?Phaser.Math.Clamp(Ve/Le,0,1):0)>=1?16728128:11739425;ve.fillStyle(3355443,.5),ve.fillRoundedRect(l,o,r,6,2),s>0&&(ve.fillStyle(c,.95),ve.fillRoundedRect(l,o,r*s,6,2))}ve.setDepth(2),ge.setDepth(1)}}function Ze(e,t,n){var a=e.width/Me,o=e.getBounds().left,r=e.getTopCenter().y-n.height/2,i=o+t*a/2-1.333*n.width;n.x=i,n.y=r}function et(e,t,n){var a,o=String(t);"top"===e?"1"===o?a=p:"2"===o?a=f:"3"===o&&(a=d):"bottom"===e&&("1"===o?a=m:"2"===o?a=y:"3"===o&&(a=v));var r=a.width,i=a.getBounds().left,s=a.getTopCenter().y-n.height/2,l=i+r/2-n.width;n.x=l,n.y=s}function tt(e){return tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},tt(e)}function nt(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,at(a.key),a)}}function at(e){var t=function(e){if("object"!=tt(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=tt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==tt(t)?t:t+""}w.on("health-update",function(e){if(e.gameId===Ke&&e.username===xe){var t=Fe;if(Fe=e.health,Se&&Se.sound&&!Xe){var n=Fe-t;n<0?Se.sound.play("sfx-damage",{volume:.1}):n>0&&Se.sound.add("sfx-heal",{volume:.1})}Fe<=0&&(Xe||(Xe=!0,ue.anims.play(se(Se,Pe,"dying"),!0),Se.input.enabled=!1,ue.alpha=.5),Fe=0),Je()}});var ot=function(){function n(e,t,a,o,r,i,s,l){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.scene=e,this.character=t,this.username=a,this.team=o,this.spawnPlatform=r,this.spawn=i,this.map=l,this.mapObjects,this.playersInTeam=s,this.opMaxHealth=8e3,this.opCurrentHealth=8e3,this.opHealthBarWidth=60,this.movementTween=null,this.effects=null,this.createOpPlayer()}return function(e,t){t&&nt(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1})}(n,[{key:"createOpPlayer",value:function(){var n,a,o=this,r=ie(this.character);this.opponent=this.scene.physics.add.sprite(-100,-100,r),this.opponent.setVisible(!1);var i=le(this.character);this.bodyConfig=i&&i.body||{},i&&"number"==typeof i.maxHealth&&(this.opMaxHealth=i.maxHealth,this.opCurrentHealth=this.opMaxHealth),i.spriteScale&&1!==i.spriteScale&&this.opponent.setScale(i.spriteScale),this.opponent.body.allowGravity=!1,this.opponent.anims.play(se(this.scene,this.character,"idle"),!0),this.opFrame=this.opponent.frame;var s=this.bodyConfig,l=null!==(n=s.widthShrink)&&void 0!==n?n:35,c=null!==(a=s.heightShrink)&&void 0!==a?a:10;this.opponent.body.setSize(this.opFrame.width-l,this.opFrame.height-c),this.applyFlipOffset();var u=ce(this.character);u&&(this.effects=new u(this.scene,this.opponent),this.scene.events.on("update",this._onSceneUpdate,this)),"bottom"===this.spawnPlatform?"1"===this.map?Ze(e,this.spawn,this.opponent):"2"===this.map&&et("bottom",this.spawn,this.opponent):"top"===this.spawnPlatform&&("1"===this.map?Ze(t,this.spawn,this.opponent):"2"===this.map&&et("top",this.spawn,this.opponent)),this.opponent.setVisible(!0);var h=this.opponent.body?this.opponent.body.y:this.opponent.y-this.opponent.height/2;this.opPlayerName=this.scene.add.text(this.opponent.x,h-36,this.username),this.opPlayerName.setStyle({font:"bold 8pt Arial",fill:"#000000"}),this.opPlayerName.setOrigin(.5,0),this.opPlayerName.setDepth(3),this.opHealthText=this.scene.add.text(0,0,"",{fontFamily:"Arial",fontSize:"10px",color:"#FFFFFF",stroke:"#000000",strokeThickness:4}),this.opHealthBar=this.scene.add.graphics(),this.updateHealthBar(),this.updateUIPosition(),w.on("health-update",function(e){e.username===o.username&&(o.opCurrentHealth=e.health,o.opCurrentHealth<=0?(o.opCurrentHealth=0,o.updateHealthBar(!0),o.effects&&(o.scene.events.off("update",o._onSceneUpdate,o),o.effects=null)):o.updateHealthBar())})}},{key:"_onSceneUpdate",value:function(){if(this.effects&&this.opponent){var e=this.opponent.body&&Math.abs(this.opponent.body.velocity.x)>5||!!this.movementTween,t=this.opCurrentHealth<=0;this.effects.update(this.scene.game.loop.delta,e,t)}}},{key:"applyFlipOffset",value:function(){var e,t;if(this.opponent&&this.opponent.body){var n=this.bodyConfig||{},a=null!==(e=n.offsetXFromHalf)&&void 0!==e?e:0,o=null!==(t=n.offsetY)&&void 0!==t?t:10,r=n.flipOffset||0,i=this.opponent.flipX?r:0;this.opponent.body.setOffset(this.opponent.body.width/2+a+i,o)}}},{key:"updateUIPosition",value:function(){if(this.opponent){var e=this.opponent.body?this.opponent.body.y:this.opponent.y-this.opponent.height/2;this.opPlayerName&&this.opPlayerName.setPosition(this.opponent.x,e-36),this.updateHealthBar(!1)}}},{key:"updateHealthBar",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1?arguments[1]:void 0;this.opCurrentHealth<0&&(this.opCurrentHealth=0);var n=Math.max(0,Math.min(1,this.opCurrentHealth/this.opMaxHealth)),a=this.opHealthBarWidth*n;this.opHealthBar.clear();var o=this.opponent.x-this.opHealthBarWidth/2,r=this.opponent.body?this.opponent.body.y:this.opponent.y-this.opponent.height/2,i="number"!=typeof t||Number.isNaN(t)?r-15:t;!1===e?this.opHealthText.setText("".concat(this.opCurrentHealth)):this.opHealthText.setText("0"),this.opHealthBar.fillStyle(5855577),this.opHealthBar.fillRect(o,i,this.opHealthBarWidth,9),this.opHealthBar.lineStyle(3,0),this.opHealthBar.strokeRoundedRect(o,i,this.opHealthBarWidth,9,3),"user"===this.team?this.opHealthBar.fillStyle(3049674):this.opHealthBar.fillStyle(12278841),this.opHealthBar.fillRoundedRect(o,i,a,9,3),this.opHealthText.setPosition(this.opponent.x-this.opHealthText.width/2,i-8),this.opHealthText.setDepth(2)}},{key:"destroy",value:function(){this.movementTween&&(this.movementTween.remove(),this.movementTween=null),this.effects&&(this.scene.events.off("update",this._onSceneUpdate,this),this.effects=null),this.opponent&&this.opponent.destroy(),this.opPlayerName&&this.opPlayerName.destroy(),this.opHealthText&&this.opHealthText.destroy(),this.opHealthBar&&this.opHealthBar.destroy()}}]),n}();function rt(e){return rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},rt(e)}function it(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function st(e,t,n){return(t=ct(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function lt(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,ct(a.key),a)}}function ct(e){var t=function(e){if("object"!=rt(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=rt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==rt(t)?t:t+""}function ut(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(ut=function(){return!!e})()}function ht(e){return ht=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ht(e)}function pt(e,t){return pt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},pt(e,t)}function ft(){}var dt,mt="/assets",yt=window.location.pathname.split("/").filter(Boolean).pop(),vt=(sessionStorage.getItem("party"),function(e){var t="".concat(encodeURIComponent(e),"="),n=document.cookie||"";if(!n)return"";var a,o=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return s(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0,o=function(){};return{s:o,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,r=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw r}}}}(n.split("; "));try{for(o.s();!(a=o.n()).done;){var r=a.value;if(r.startsWith(t))return decodeURIComponent(r.slice(t.length))}}catch(e){o.e(e)}finally{o.f()}return""}("name")),gt=sessionStorage.getItem("character"),bt=sessionStorage.getItem("spawnPlatform"),wt=sessionStorage.getItem("spawn"),xt=sessionStorage.getItem("partyMembers"),St=Number(xt),Pt=sessionStorage.getItem("map"),kt=[],Mt=[],jt=!1,Ot=0,Tt={x:0,y:0,flip:!1,animation:null},Ct=!1,Dt=[],It=function(){function o(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),function(e,t,n){return t=ht(t),function(e,t){if(t&&("object"==rt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,ut()?Reflect.construct(t,n||[],ht(e).constructor):t.apply(e,n))}(this,o,arguments)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&pt(e,t)}(o,Phaser.Scene),function(e,t){t&&lt(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1})}(o,[{key:"preload",value:function(){this.load.image("lushy-bg","".concat(mt,"/Lushy/gameBg.png")),this.load.image("mangrove-bg","".concat(mt,"/Mangrove/gameBg.png")),function(e,t){for(var n=0,a=Object.keys(re);n<a.length;n++){var o=a[n],r=re[o];r.preload&&r.preload(e,t)}}(this,mt),this.load.atlas("troll","".concat(mt,"/troll_spritesheet.png"),"".concat(mt,"/troll.json")),this.load.image("tiles-image","".concat(mt,"/map.png")),this.load.tilemapTiledJSON("tiles","".concat(mt,"/tilesheet.json")),this.load.image("lushy-base","".concat(mt,"/Lushy/base.png")),this.load.image("lushy-platform","".concat(mt,"/Lushy/largePlatform.png")),this.load.image("lushy-side-platform","".concat(mt,"/Lushy/sidePlatform.png")),this.load.image("mangrove-tiny-platform","".concat(mt,"/Mangrove/tinyPlatform.png")),this.load.image("mangrove-base-left","".concat(mt,"/Mangrove/baseLeft.png")),this.load.image("mangrove-base-middle","".concat(mt,"/Mangrove/baseMiddle.png")),this.load.image("mangrove-base-right","".concat(mt,"/Mangrove/baseRight.png")),this.load.image("mangrove-base-top","".concat(mt,"/Mangrove/baseTop.png")),this.load.image("thorg-weapon","".concat(mt,"/thorg/weapon.png")),this.load.audio("sfx-step","".concat(mt,"/step.ogg")),this.load.audio("sfx-jump","".concat(mt,"/jump.mp3")),this.load.audio("sfx-land","".concat(mt,"/land.mp3")),this.load.audio("sfx-walljump","".concat(mt,"/walljump.mp3")),this.load.audio("sfx-damage","".concat(mt,"/damage.mp3")),this.load.audio("sfx-heal","".concat(mt,"/heal.mp3")),this.load.audio("main","".concat(mt,"/main.wav")),this.load.audio("win","".concat(mt,"/win.mp3")),this.load.audio("lose","".concat(mt,"/lose.wav"))}},{key:"create",value:function(){var o,r,i=this;(null===(o=this.cameras)||void 0===o?void 0:o.main)&&(this.cameras.main.roundPixels=!0),"1"===Pt?(dt=g,function(o){o.game.config.width,o.game.config.height;var r=o.cameras.main.width/2,i=o.add.sprite(0,-180,"lushy-bg");i.displayWidth=o.sys.canvas.width,i.displayHeight=o.sys.canvas.height+500,i.setOrigin(0,0),(e=o.physics.add.sprite(r,550,"lushy-base")).body.allowGravity=!1,e.setImmovable(!0),e.setScale(.7),g.push(e),(t=o.physics.add.sprite(r,250,"lushy-platform")).setScale(.7),t.body.allowGravity=!1,t.setImmovable(!0),g.push(t),(n=o.physics.add.sprite(r-500,260,"lushy-side-platform")).setScale(.7),n.body.allowGravity=!1,n.setImmovable(!0),g.push(n),(a=o.physics.add.sprite(r+500,260,"lushy-side-platform")).setScale(.7),a.body.allowGravity=!1,a.setImmovable(!0),g.push(a)}(this)):"2"===Pt&&(dt=b,function(e){e.game.config.width,e.game.config.height;var t=e.cameras.main.width/2,n=e.add.sprite(0,-180,"mangrove-bg");n.displayWidth=e.sys.canvas.width,n.displayHeight=e.sys.canvas.height+500,n.setOrigin(0,0),(l=e.physics.add.sprite(t,600,"mangrove-base-middle")).body.allowGravity=!1,l.setImmovable(!0),l.setScale(.6),b.push(l),(c=e.physics.add.sprite(t,408,"mangrove-base-top")).body.allowGravity=!1,c.setImmovable(!0),c.setScale(.6),b.push(c),(u=e.physics.add.sprite(t-422,638,"mangrove-base-left")).body.allowGravity=!1,u.setImmovable(!0),u.setScale(.6),b.push(u),(h=e.physics.add.sprite(t+422,638,"mangrove-base-right")).body.allowGravity=!1,h.setImmovable(!0),h.setScale(.6),b.push(h),(p=e.physics.add.sprite(t-280,325,"mangrove-tiny-platform")).setScale(.6),p.body.allowGravity=!1,p.setImmovable(!0),b.push(p),(f=e.physics.add.sprite(t+280,325,"mangrove-tiny-platform")).setScale(.6),f.body.allowGravity=!1,f.setImmovable(!0),b.push(f),(d=e.physics.add.sprite(t-430,200,"mangrove-tiny-platform")).setScale(.6),d.body.allowGravity=!1,d.setImmovable(!0),b.push(d),(m=e.physics.add.sprite(t+430,200,"mangrove-tiny-platform")).setScale(.6),m.body.allowGravity=!1,m.setImmovable(!0),b.push(m),(y=e.physics.add.sprite(t-130,150,"mangrove-tiny-platform")).setScale(.6),y.body.allowGravity=!1,y.setImmovable(!0),b.push(y),(v=e.physics.add.sprite(t+130,150,"mangrove-tiny-platform")).setScale(.6),v.body.allowGravity=!1,v.setImmovable(!0),b.push(v)}(this)),function(e){for(var t=0,n=Object.keys(re);t<n.length;t++){var a=n[t],o=re[a];o&&o.setupAnimations&&o.setupAnimations(e)}}(this),this._bgmStarted=!1;var s=function(){if(!i._bgmStarted){i._bgmStarted=!0;try{i.bgmMain||(i.bgmMain=i.sound.add("main",{volume:.02,loop:!1})),i.bgmMain.play()}catch(e){}}};this.sound.locked?this.sound.once("unlocked",s):s(),this.input.once("pointerdown",s),null===(r=this.input.keyboard)||void 0===r||r.once("keydown",s),function(n,a,o,r,i,s,l,c){var u,h,p,f,d,m;xe=a,ke=i,Me=s,je=r,Te=l,Ce=c,Pe=o,he=(Se=n).input.keyboard.createCursorKeys();var y=ie(o);(ue=Se.physics.add.sprite(-100,-100,y)).anims.play(se(Se,Pe,"idle"),!0),ue.setVisible(!1);var v=le(o);_e=null!==(u=v.maxHealth)&&void 0!==u?u:_e,Fe=_e,Ne=null!==(h=v.ammoCooldownMs)&&void 0!==h?h:Ne,Le=null!==(p=v.ammoReloadMs)&&void 0!==p?p:Le,Ge=Math.max(1,null!==(f=v.ammoCapacity)&&void 0!==f?f:Ge),Ue=Ge,Ye=0,Ve=0,v.spriteScale&&1!==v.spriteScale&&ue.setScale(v.spriteScale),de=ue.frame;var x=v&&v.body||{};$e=x;var S=null!==(d=x.widthShrink)&&void 0!==d?d:35,P=null!==(m=x.heightShrink)&&void 0!==m?m:10;ue.body.setSize(de.width-S,de.width-P),(ze=function(){var e,t;if(ue&&ue.body){var n=$e||{},a=n.flipOffset||0,o=ue.flipX?a:0;ue.body.setOffset(ue.body.width/2+(null!==(e=n.offsetXFromHalf)&&void 0!==e?e:0)+o,null!==(t=n.offsetY)&&void 0!==t?t:10)}})(),Se.events.on("update",function(){ue.y>Se.physics.world.bounds.bottom+50&&setTimeout(function(){Xe||w.emit("hit",{attacker:xe,target:xe,damage:99999,gameId:Ke})},500)}),"1"===Te?Oe=g:"2"===Te&&(Oe=b),"bottom"===je?"1"===Te?Ze(e,ke,ue):"2"===Te&&et("bottom",ke,ue):"top"===je&&("1"===Te?Ze(t,ke,ue):"2"===Te&&et("top",ke,ue)),ue.setVisible(!0);var k=ue.body?ue.body.y:ue.y-ue.height/2;(be=Se.add.text(ue.x,k-50,xe)).setStyle({font:"bold 8pt Arial",fill:"#000000"}),be.setOrigin(.5,0),ye=Se.add.text(0,0,"",{fontFamily:"Arial",fontSize:"10px",color:"#FFFFFF",stroke:"#000000",strokeThickness:4}),me=Se.add.graphics(),ge=Se.add.graphics(),ve=Se.add.graphics(),we=Se.add.graphics();var M=new Phaser.Geom.Triangle(ue.x,k-10,ue.x-13,k-20,ue.x+13,k-20);we.fillStyle(10070828),we.fillTriangleShape(M);var j={getAmmoCapacity:function(){return Ge},getAmmoCooldownMs:function(){return Ne},getAmmoReloadMs:function(){return Le},getCharges:function(){return Ue},getNextFireTime:function(){return Ye},tryConsume:function(){var e=Date.now();return!(!Re||e<Ye||Ue<=0||(Ye=e+Ne,(Ue-=1)<Ge&&Ve<=0&&(Ve=0),0))},grantCharge:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;(Ue=Math.min(Ge,Ue+e))>=Ge&&(Ve=0),Qe()},setCanAttack:function(e){return Re=e},setIsAttacking:function(e){return Be=e},drawAmmoBar:function(){return Qe()}},O=function(e,t){var n=re[e];return n?new n(t):null}(o,{scene:Se,player:ue,username:xe,gameId:Ke,opponentPlayersRef:Ce,mapObjects:Oe,ammoHooks:j});O&&O.attachInput&&O.attachInput();var T=ce(Pe);qe=T?new T(Se,ue):null}(this,vt,gt,bt,wt,xt,Pt,kt),this.input.keyboard.on("keydown-M",function(e){var t,n;if(e.ctrlKey){var a=null===(t=i.physics)||void 0===t?void 0:t.world;a&&(a.drawDebug=!a.drawDebug,a.debugGraphic&&(a.debugGraphic.clear(),a.debugGraphic.setVisible(a.drawDebug)),null!==(n=i.sys)&&void 0!==n&&null!==(n=n.game)&&void 0!==n&&null!==(n=n.config)&&void 0!==n&&null!==(n=n.physics)&&void 0!==n&&n.arcade&&(i.sys.game.config.physics.arcade.debug=a.drawDebug))}}),dt.forEach(function(e){i.physics.add.collider(ue,e)}),document.getElementById("fight").style.width="60%",document.getElementById("your-team").textContent="Your Team: ".concat(xt,"/").concat(xt," players"),document.getElementById("opposing-team").textContent="Opposing Team: ".concat(xt,"/").concat(xt," players"),w.emit("player-joined",{username:vt,character:gt}),fetch("/players",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({gameId:yt,username:vt})}).then(function(e){return e.json()}).then(function(e){for(var t in e.userTeam)if(t!==vt){var n=new ot(i,e.userTeam[t].character,t,"user",e.userTeam[t].spawnPlatform,e.userTeam[t].spawn,xt,Pt);Mt[t]=n,void 0!==e.userTeam[t].x&&void 0!==e.userTeam[t].y&&(n.opponent.x=e.userTeam[t].x,n.opponent.y=e.userTeam[t].y),ft()}for(var a in e.opTeam)if(a!==vt){var o=new ot(i,e.opTeam[a].character,a,"op",e.opTeam[a].spawnPlatform,e.opTeam[a].spawn,xt,Pt);kt[a]=o,void 0!==e.opTeam[a].x&&void 0!==e.opTeam[a].y&&(o.opponent.x=e.opTeam[a].x,o.opponent.y=e.opTeam[a].y),ft()}}).catch(function(e){console.error("Error:",e)}),setTimeout(function(){var e=document.getElementById("fight");e.style.opacity="0",e.addEventListener("transitionend",function(t){e.remove()})},1e3),function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,n=0;n<t;n++)fe(e,-9999,-9999);pe.forEach(function(e){e.active=!1,e.clear()})}(this,8),w.on("move",function(e){if(!Ct){var t=kt[e.username]||Mt[e.username];if(t){var n=t.opponent.x,a=t.opponent.y,o=Math.abs(e.x-n),r=Math.abs(e.y-a),s=Math.sqrt(o*o+r*r);if(s>300)t.opponent.x=e.x,t.opponent.y=e.y;else{t.movementTween&&t.movementTween.remove();var l=Math.min(150,.8*s);t.movementTween=i.tweens.add({targets:t.opponent,x:e.x,y:e.y,duration:l,ease:"Power2.easeOut",onUpdate:function(){var e=t.opponent,n=e.body?e.body.y:e.y-e.height/2;t.opPlayerName.setPosition(e.x,n-36)},onComplete:function(){t.movementTween=null}})}t.opponent.flipX=e.flip,"function"==typeof t.applyFlipOffset&&t.applyFlipOffset(),t.opponent.anims.play(se(i,t.character,e.animation,"idle"),!0);var c=t.opponent.body?t.opponent.body.y:t.opponent.y-t.opponent.height/2;if(t.opPlayerName.setPosition(t.opponent.x,c-36),o>3&&(t._dustTimer=(t._dustTimer||0)+16,t._dustTimer>=70)){t._dustTimer=0;var u=t.opponent,h=u.body?u.body.y+u.body.height:u.y+u.height/2;fe(i,u.x,h-2)}}}}),w.on("state",function(e){e.gameId===yt&&(Ct=!0,Dt.push(e),Dt.length>60&&Dt.shift())}),w.on("attack",function(e){var t=kt[e.name]||Mt[e.name],n=t?t.character:null,a=!!n&&function(e,t,n,a){var o=re[t];return!(!o||"function"!=typeof o.handleRemoteAttack||(o.handleRemoteAttack(e,n,a),0))}(i,n,e,t);if(!a){console.log("not handled");var o=i.physics.add.image(e.x,e.y,"fireball");o.setScale(.4),o.setVelocity(400*(e.direction||1),0),o.flipX=(null==e?void 0:e.direction)<0,o.body.allowGravity=!1}}),w.on("death",function(e){if(e.username!==vt){var t=kt[e.username]||Mt[e.username];t&&(t.movementTween&&(t.movementTween.remove(),t.movementTween=null),e.username in kt?document.getElementById("your-team").textContent="Your Team: ".concat(St-1,"/").concat(xt," players"):document.getElementById("opposing-team").textContent="Opposing Team: ".concat(St-1,"/").concat(xt," players"),t.opponent.anims.play(se(i,t.character,"dying"),!0),t.opponent.alpha=.5,t.opPlayerName.setPosition(t.opponent.x,t.opPlayerName.y+30),t.opCurrentHealth=0,t.updateHealthBar(!0),kt[e.username]?delete kt[e.username]:Mt[e.username]&&delete Mt[e.username])}}),w.on("game-over",function(e){if(yt===e.gameId){jt=!0;try{i.bgmMain&&i.bgmMain.isPlaying&&i.bgmMain.stop();var t=e.losers.includes(vt),n=t?"lose":"win",a=t?.5:.6;i.bgmResult=i.sound.add(n,{volume:a,loop:!1}),i.bgmResult.play()}catch(e){}var o=document.getElementById("game-over");e.losers.includes(vt)?(o.textContent="You Lose",o.style.color="#c81212"):(o.textContent="You Win",o.style.color="#18c321"),document.getElementById("username-text").textContent=vt,document.getElementById("character-text").textContent="".concat(gt[0].toUpperCase()+gt.slice(1)),document.getElementById("character-image").src="/assets/".concat(gt,"/body.png"),setTimeout(function(){i.input.enabled=!1,document.getElementById("container").style.display="flex",document.getElementById("dark-overlay").style.display="block",document.getElementById("dark-overlay").style.backgroundColor="rgba(0, 0, 0, 0.363)"},1e3)}})}},{key:"update",value:function(){var e=this;if(!jt){if(!Xe){var t;!function(e){var t=he.left.isDown||e.input.keyboard.addKey("A").isDown,n=he.right.isDown||e.input.keyboard.addKey("D").isDown,a=he.up.isDown||e.input.keyboard.addKey("W").isDown;if(t){we&&we.clear(),ue.setVelocityX(-250);var o=ue.flipX;ue.flipX=!0,ue.flipX!==o&&ze&&ze(),Ie=!0,!ue.body.touching.down||Be||Xe||(ue.anims.play(se(e,Pe,"running"),!0),(Ee+=e.game.loop.delta)>=280&&(Ee=0,e.sound.play("sfx-step",{volume:.18})))}else if(n){we&&we.clear();var r=ue.flipX;ue.flipX=!1,ue.flipX!==r&&ze&&ze(),ue.setVelocityX(250),Ie=!0,!ue.body.touching.down||Be||Xe||(ue.anims.play(se(e,Pe,"running"),!0),(Ee+=e.game.loop.delta)>=280&&(Ee=0,e.sound.play("sfx-step",{volume:.2})))}else ue.setVelocityX(0),Ie=!1;a&&ue.body.touching.down&&!Xe?(we&&we.clear(),ue.anims.play(se(e,Pe,"jumping"),!0),ue.setVelocityY(-400),Ie=!0,Ae=!0,e.sound.play("sfx-jump",{volume:.6})):(ue.body.touching.left||ue.body.touching.right&&!Xe)&&De&&a&&(De=!1,ue.anims.play(se(e,Pe,"sliding"),!0),ue.setVelocityY(-400),e.tweens.add({targets:ue,x:ue.x+(ue.body.touching.left?50:-50),duration:200,ease:"Linear",onComplete:function(){De=!0}}).play(),e.sound.play("sfx-walljump",{volume:.9})),(ue.body.touching.left||ue.body.touching.right&&!Xe)&&!Be&&ue.anims.play(se(e,Pe,"sliding"),!0),ue.anims.isPlaying||ue.body.touching.down||ue.body.touching.left||ue.body.touching.right||(ue.anims.play(se(e,Pe,"falling"),!0),Ae=!1),Ie||!ue.body.touching.down||Ae||Be||Xe||ue.anims.play(se(e,Pe,"idle"),!0),Je();var i=ue.body?ue.body.y:ue.y-ue.height/2;be.setPosition(ue.x,i-22);var s=ue.body.touching.down;if(He||!s||Xe||e.sound.play("sfx-land",{volume:.8}),He=s,Ue<Ge?(Ve+=e.game.loop.delta)>=Le&&(Ve=0,Ue=Math.min(Ge,Ue+1)):Ve=0,Xe||Qe(),qe&&qe.update(e.game.loop.delta,Ie,Xe),We+=e.game.loop.delta,!Xe&&Ie&&ue.body.touching.down&&We>=70){We=0;var l=(ue.body?ue.body.y+ue.body.height:ue.y+ue.height/2)-2,c=ue.x+.3*(ue.flipX?-18:18);fe(e,c,l),Math.random()<.3&&fe(e,c+Phaser.Math.Between(-6,6),l+Phaser.Math.Between(-2,2))}}(this);var n=Date.now(),a={x:Math.round(ue.x),y:Math.round(ue.y),flip:ue.flipX,animation:(null===(t=ue.anims.currentAnim)||void 0===t?void 0:t.key)||"idle"};(Math.abs(a.x-Tt.x)>1||Math.abs(a.y-Tt.y)>1||a.flip!==Tt.flip||a.animation!==Tt.animation)&&n-Ot>=25&&(w.emit("move",{x:a.x,y:a.y,flip:a.flip,animation:a.animation,username:vt}),Ot=n,Tt=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?it(Object(n),!0).forEach(function(t){st(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):it(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},a))}if(Ct&&Dt.length>=1){for(var o=Dt[Dt.length-1].t-100,r=null,i=null,s=Dt.length-1;s>=0;s--){var l=Dt[s];if(l.t<=o){r=l,i=Dt[s+1]||l;break}}r||(r=Dt[0],i=Dt[1]||r);var c=r.t,u=Math.max(i.t,c+1),h=Phaser.Math.Clamp((o-c)/(u-c),0,1),p=function(e,t,n){return e+(t-e)*n},f=function(t,n){var a,o,s,l;if(t){var c=t.opponent;t.movementTween&&(t.movementTween.remove(),t.movementTween=null);var u=r.players[n],f=i.players[n]||u;if(u||f){var d=u||f,m=f||u;if(d&&!Number.isNaN(d.x)&&!Number.isNaN(d.y)){var y,v,g=p(d.x,null!==(a=null==m?void 0:m.x)&&void 0!==a?a:d.x,h),b=p(d.y,null!==(o=null==m?void 0:m.y)&&void 0!==o?o:d.y,h);Math.hypot((null!==(s=null==m?void 0:m.x)&&void 0!==s?s:d.x)-d.x,(null!==(l=null==m?void 0:m.y)&&void 0!==l?l:d.y)-d.y)>260?(c.x=null!==(y=null==m?void 0:m.x)&&void 0!==y?y:d.x,c.y=null!==(v=null==m?void 0:m.y)&&void 0!==v?v:d.y):(c.x=g,c.y=b);var w=m&&m.animation?m:d,x=c.flipX;c.flipX=!!w.flip,c.flipX!==x&&"function"==typeof t.applyFlipOffset&&t.applyFlipOffset(),w.animation&&c.anims.play(se(e,t.character,w.animation,"idle"),!0);var S=c.body?c.body.y:c.y-c.height/2;t.opPlayerName.setPosition(c.x,S-36)}}}};for(var d in kt)f(kt[d],d);for(var m in Mt)f(Mt[m],m)}for(var y in kt)kt[y].updateHealthBar();for(var v in Mt)Mt[v].updateHealthBar()}}}]),o}(),At={type:Phaser.AUTO,pixelArt:!0,roundPixels:!0,antialias:!1,resolution:window.devicePixelRatio,scale:{mode:Phaser.Scale.FIT,autoCenter:Phaser.Scale.CENTER_BOTH,width:1300,height:600},scene:It,physics:{default:"arcade",arcade:{gravity:{y:750},debug:!0}}};new Phaser.Game(At)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
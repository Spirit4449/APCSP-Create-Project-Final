/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{"use strict";var e={73:(e,t,n)=>{n.d(t,{R:()=>P});var r=n(124),a=n(903),o=n(915);function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var i=null;function s(e){i=e;var t=document.createElement("div");t.className="character-select-overlay";var n=document.createElement("canvas");n.className="particles-canvas",t.appendChild(n);var r=document.createElement("div");r.className="character-select-popup";var a=document.createElement("div");a.className="popup-header";var s=document.createElement("h2");s.className="popup-title",s.textContent="Choose Your Fighter";var u=document.createElement("button");u.className="close-popup",u.innerHTML="Ã—",u.onclick=function(){return y()};var d=document.createElement("div");d.className="characters-grid",(0,o.w)().forEach(function(t){return d.appendChild(l(t,e))}),a.appendChild(s),a.appendChild(u),r.appendChild(a),r.appendChild(d),t.appendChild(r),document.body.appendChild(t),t.addEventListener("click",function(e){r.contains(e.target)||y()}),r.addEventListener("click",function(e){return e.stopPropagation()});var m=null,p=n.getContext("2d"),f=[];function v(){var e=window.devicePixelRatio||1;n.width=n.clientWidth*e,n.height=n.clientHeight*e,p.setTransform(e,0,0,e,0,0)}function h(){var e=n.clientWidth,t=n.clientHeight;p.clearRect(0,0,e,t),p.fillStyle="rgba(0,0,0,0.15)",p.fillRect(0,0,e,t);var r,a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return c(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}(f);try{for(a.s();!(r=a.n()).done;){var o=r.value;o.x+=o.vx,o.y+=o.vy,(o.x<0||o.x>e)&&(o.vx*=-1),(o.y<0||o.y>t)&&(o.vy*=-1),p.beginPath(),p.arc(o.x,o.y,o.r,0,2*Math.PI),p.fillStyle=o.c,p.fill()}}catch(e){a.e(e)}finally{a.f()}m=requestAnimationFrame(h)}function y(){t.style.display="none",m&&cancelAnimationFrame(m),m=null,p.clearRect(0,0,n.clientWidth,n.clientHeight)}window.addEventListener("resize",v),window.__openCharacterSelect=function(){t.style.display="flex",v(),f=new Array(100).fill(0).map(function(){return{x:Math.random()*n.clientWidth,y:Math.random()*n.clientHeight,vx:.4*(Math.random()-.5),vy:.4*(Math.random()-.5),r:2*Math.random()+.5,c:Math.random()<.5?"rgba(255,255,255,0.35)":"rgba(120,180,255,0.25)"}}),m||(m=requestAnimationFrame(h))},window.__closeCharacterSelect=y}function l(e,t){var n,r,a=document.createElement("div");a.className="character-card",a.dataset.char=e;var c=(0,o.zH)(e),s=null!==(n=(null==t?void 0:t.char_levels)&&(null!==(r=t.char_levels[e])&&void 0!==r?r:0))&&void 0!==n?n:0,l=0===s,u=s>=o.Mg,f=(0,o.le)(e,Math.max(1,s)),v=(0,o.Ug)(e,Math.max(1,s)),h=(0,o.NB)(e,Math.max(1,s)),y=(0,o.le)(e,o.Mg),g=(0,o.Ug)(e,o.Mg),b=(0,o.NB)(e,o.Mg),C=document.createElement("div");C.className="character-header";var E=document.createElement("img");E.className="character-image",E.src="/assets/".concat(e,"/body.png"),E.alt=e;var w=document.createElement("div");w.className="character-info";var x=document.createElement("h3");x.className="character-name",x.textContent=e;var N=document.createElement("p");N.className="character-description",N.textContent=c.description,w.appendChild(x),w.appendChild(N),C.appendChild(E),C.appendChild(w);var S=document.createElement("img");S.className="level-badge",S.src="/assets/levels/".concat(s,".png"),S.alt="Level ".concat(s),S.onerror=function(){this.style.display="none"},a.appendChild(S);var k=document.createElement("div");k.className="character-stats";var _=Math.min(100,f/y*100),I=Math.min(100,v/g*100),L=Math.min(100,h/b*100),j=document.createElement("div");j.className="stat-section",j.innerHTML='\n    <img src="/assets/heart.png" alt="Health" class="stat-icon" onerror="this.style.display=\'none\'">\n    <div class="stat-section-title">Health</div>\n    <div class="stat-main-value">'.concat(f,'</div>\n    <div class="stat-bar health-bar"><div class="stat-fill" style="width: ').concat(_,'%"></div></div>');var O=document.createElement("div");O.className="stat-section",O.innerHTML='\n    <img src="/assets/attack.png" alt="Attack" class="stat-icon" onerror="this.style.display=\'none\'">\n    <div class="stat-section-title">Attack</div>\n    <div class="stat-main-value">'.concat(v,'</div>\n    <div class="stat-bar attack-bar"><div class="stat-fill" style="width: ').concat(I,'%"></div></div>\n    <div class="stat-details">').concat(c.ammoCapacity," ammo<br>").concat((c.ammoReloadMs/1e3).toFixed(1),"s reload</div>");var P=document.createElement("div");P.className="stat-section",P.innerHTML='\n    <img src="/assets/special.png" alt="Special" class="stat-icon" onerror="this.style.display=\'none\'">\n    <div class="stat-section-title">Special</div>\n    <div class="stat-main-value">'.concat(h,'</div>\n    <div class="stat-bar special-bar"><div class="stat-fill" style="width: ').concat(L,'%"></div></div>\n    <div class="stat-details">').concat(c.specialChargeHits," hits to charge</div>");var T=document.createElement("div");if(T.className="action-row",l){var M=c.unlockPrice,A=document.createElement("button");A.className="locked-button";var B="number"==typeof M?'<span class="button-price"><img class="cs-currency" src="/assets/gem.png" alt=""/> '.concat(M,"</span>"):"";A.innerHTML='<img class="lock-icon" src="/assets/lock.png" alt="" onerror="this.style.display=\'none\'"/> <span>Locked</span> '.concat(B),A.addEventListener("click",function(t){t.stopPropagation(),d({type:"unlock",character:e,level:s,price:M},function(){return function(e){fetch("/buy",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({character:e})}).then(function(e){return e.json()}).then(function(t){if(t.success){try{i&&(void 0!==t.gems?i.gems=Number(t.gems):i.gems=Math.max(0,Number(i.gems||0)-Number(t.spent||0)),i.char_levels=i.char_levels||{},i.char_levels[e]=Number(t.newLevel||1))}catch(e){}p(e,i||{},"unlock"),document.getElementById("gem-count").textContent=i.gems}else m(t.error||"Unlock failed.")}).catch(function(e){m((null==e?void 0:e.message)||"Network error.")})}(e)})}),T.appendChild(A),a.classList.add("locked")}else if(u){var q=document.createElement("div");q.className="maxed-button",q.textContent="Maxed Out",T.appendChild(q)}else{var H=(0,o.O0)(s),F=document.createElement("button");F.className="upgrade-button gleam",F.innerHTML='<img class="upgrade-icon" src="/assets/upgrade.png" alt="" onerror="this.style.display=\'none\'"/> <span>Upgrade</span> <span class="button-price"><img class="cs-currency" src="/assets/coin.png" alt=""/> '.concat(H,"</span>"),F.addEventListener("click",function(t){t.stopPropagation(),d({type:"upgrade",character:e,level:s,price:H},function(){return function(e){fetch("/upgrade",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({character:e})}).then(function(e){return e.json()}).then(function(t){if(t.success){try{if(i){var n=Number(t.spent||0),r=Number(t.newLevel);i.coins=Math.max(0,Number(i.coins||0)-n),i.char_levels=i.char_levels||{},i.char_levels[e]=r}}catch(e){}p(e,i||{},"upgrade"),document.getElementById("coin-count").textContent=i.coins}else m(t.error||"Upgrade failed.")}).catch(function(e){m((null==e?void 0:e.message)||"Network error.")})}(e)})}),T.appendChild(F)}return k.appendChild(j),k.appendChild(O),k.appendChild(P),a.appendChild(C),a.appendChild(k),a.appendChild(T),l||a.addEventListener("click",function(){return function(e){console.log("Character selected:",e),document.querySelector(".character-select-overlay").style.display="none"}(e)}),a}function u(){if(window.__openCharacterSelect)return window.__openCharacterSelect();document.querySelector(".character-select-overlay").style.display="flex"}function d(e,t){var n,r,a,c,s=e.type,l=e.character,u=e.level,d=e.price;if(!document.querySelector(".character-select-overlay"))return t&&t();var m=Number(null!==(n=null===(r=i)||void 0===r?void 0:r.coins)&&void 0!==n?n:0),p=Number(null!==(a=null===(c=i)||void 0===c?void 0:c.gems)&&void 0!==a?a:0),f="upgrade"===s,v=(f?m:p)-Number(d||0);if(v<0)return function(e){if(document.querySelector(".character-select-overlay")){var t=document.createElement("div");t.className="cs-confirm-backdrop";var n=document.createElement("div");n.className="cs-confirm",n.addEventListener("click",function(e){return e.stopPropagation()});var r=document.createElement("div");r.className="cs-confirm-title",r.textContent="Not enough funds";var a=document.createElement("div");a.className="cs-confirm-body";var o=document.createElement("p"),c=document.createElement("img");c.className="cs-currency",c.src="coins"===e?"/assets/coin.png":"/assets/gem.png",c.alt=e,o.appendChild(c);var i=document.createElement("span");i.textContent=" Not enough ".concat(e," to complete this purchase."),o.appendChild(i),a.appendChild(o);var s=document.createElement("div");s.className="cs-confirm-actions";var l=document.createElement("button");l.className="cs-btn cancel",l.textContent="Close",l.onclick=function(){return t.remove()},s.appendChild(l),n.appendChild(r),n.appendChild(a),n.appendChild(s),t.appendChild(n),t.addEventListener("click",function(e){e.target===t&&t.remove(),e.stopPropagation()}),document.body.appendChild(t)}}(f?"coins":"gems");var h=document.createElement("div");h.className="cs-confirm-backdrop";var y=document.createElement("div");y.className="cs-confirm",y.addEventListener("click",function(e){return e.stopPropagation()});var g=document.createElement("div");g.className="cs-confirm-title",g.textContent=f?"Confirm Upgrade":"Confirm Unlock";var b=document.createElement("div");if(b.className="cs-confirm-body",!f){var C=document.createElement("div");C.className="cs-hero";var E=document.createElement("div");E.className="cs-hero-beams gem";var w=document.createElement("img");w.className="cs-hero-img",w.src="/assets/".concat(l,"/body.png"),w.alt=l,C.appendChild(E),C.appendChild(w),b.appendChild(C)}if(f){var x=document.createElement("div");x.className="cs-level-line";var N=document.createElement("img");N.className="cs-level-img",N.src="/assets/levels/".concat(u,".png"),N.alt="Level ".concat(u);var S=document.createElement("img");S.className="cs-arrow",S.src="/assets/arrow.png",S.alt=">";var k=document.createElement("div");k.className="cs-next-wrap";var _=document.createElement("div");_.className="cs-beams coin";var I=document.createElement("img");I.className="cs-next-badge",I.src="/assets/levels/".concat(Math.min(u+1,o.Mg),".png"),I.alt="Level ".concat(Math.min(u+1,o.Mg)),k.appendChild(_),k.appendChild(I),x.appendChild(N),x.appendChild(S),x.appendChild(k),b.appendChild(x)}var L=document.createElement("p");L.className="cs-price-row";var j=document.createElement("img");j.className="cs-currency",j.src=f?"/assets/coin.png":"/assets/gem.png",j.alt=f?"Coins":"Gems";var O=document.createElement("span");O.textContent="Remaining after purchase: ".concat(Math.max(v,0)),L.appendChild(j),L.appendChild(O),b.appendChild(L);var P=document.createElement("div");P.className="cs-confirm-actions";var T=document.createElement("button");T.className="cs-btn cancel",T.textContent="Cancel";var M=document.createElement("button");M.className="cs-btn confirm",M.innerHTML='<img class="cs-currency" src="'.concat(f?"/assets/coin.png":"/assets/gem.png",'" alt=""/> <span>').concat(d,"</span>"),T.onclick=function(){return h.remove()},h.addEventListener("click",function(e){e.target===h&&h.remove(),e.stopPropagation()}),M.onclick=function(){h.remove(),t&&t()},P.appendChild(T),P.appendChild(M),y.appendChild(g),y.appendChild(b),y.appendChild(P),h.appendChild(y),document.body.appendChild(h)}function m(e){var t=document.createElement("div");t.className="cs-confirm-backdrop";var n=document.createElement("div");n.className="cs-confirm",n.addEventListener("click",function(e){return e.stopPropagation()});var r=document.createElement("div");r.className="cs-confirm-title",r.textContent="Purchase failed";var a=document.createElement("div");a.className="cs-confirm-body";var o=document.createElement("p");o.textContent=e||"Something went wrong. Please try again.",a.appendChild(o);var c=document.createElement("div");c.className="cs-confirm-actions";var i=document.createElement("button");i.className="cs-btn cancel",i.textContent="Close",i.onclick=function(){return t.remove()},c.appendChild(i),n.appendChild(r),n.appendChild(a),n.appendChild(c),t.appendChild(n),t.addEventListener("click",function(e){e.target===t&&t.remove(),e.stopPropagation()}),document.body.appendChild(t)}function p(e,t,n){var r=document.querySelector(".characters-grid"),a=r&&r.querySelector('.character-card[data-char="'.concat(CSS.escape(e),'"]'));if(a&&r){var o=l(e,t);r.replaceChild(o,a),function(e,t){if(e){var n=document.createElement("div");n.className="cs-card-success";var r=document.createElement("div");r.className="cs-card-beams ".concat("unlock"===t?"gem":"coin");var a=document.createElement("div");a.className="cs-card-success-label",a.textContent="unlock"===t?"Unlocked!":"Upgraded!",n.appendChild(r),n.appendChild(a),e.appendChild(n),setTimeout(function(){n.classList.add("fade-out"),setTimeout(function(){return n.remove()},350)},900)}}(o,n)}}function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function v(){var e=E(),t=e.m(v),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function o(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,a[e],t)},delegateYield:function(e,a,o){return t.resultName=a,n(r.d,h(e),o)},finish:function(e){return n(r.f,e)}},n=function(e,n,a){r.p=t.prev,r.n=t.next;try{return e(n,a)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(v=function(){return{wrap:function(t,n,r,a){return e.w(o(t),n,r,a&&a.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new x(e,t)},AsyncIterator:C,async:function(e,t,n,a,c){return(r(t)?b:g)(o(e),t,n,a,c)},keys:y,values:h}})()}function h(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(f(e)+" is not iterable")}function y(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function g(e,t,n,r,a){var o=b(e,t,n,r,a);return o.next().then(function(e){return e.done?e.value:o.next()})}function b(e,t,n,r,a){return new C(E().w(e,t,n,r),a||Promise)}function C(e,t){function n(r,a,o,c){try{var i=e[r](a),s=i.value;return s instanceof x?t.resolve(s.v).then(function(e){n("next",e,o,c)},function(e){n("throw",e,o,c)}):t.resolve(s).then(function(e){i.value=e,o(i)},function(e){return n("throw",e,o,c)})}catch(e){c(e)}}var r;this.next||(w(C.prototype),w(C.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),w(this,"_invoke",function(e,a,o){function c(){return new t(function(t,r){n(e,o,t,r)})}return r=r?r.then(c,c):c()},!0)}function E(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",a=n.toStringTag||"@@toStringTag";function o(n,r,a,o){var s=r&&r.prototype instanceof i?r:i,l=Object.create(s.prototype);return w(l,"_invoke",function(n,r,a){var o,i,s,l=0,u=a||[],d=!1,m={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(t,n){return o=t,i=0,s=e,m.n=n,c}};function p(n,r){for(i=n,s=r,t=0;!d&&l&&!a&&t<u.length;t++){var a,o=u[t],p=m.p,f=o[2];n>3?(a=f===r)&&(s=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=n<2&&p<o[1])?(i=0,m.v=r,m.n=o[1]):p<f&&(a=n<3||o[0]>r||r>f)&&(o[4]=n,o[5]=r,m.n=f,i=0))}if(a||n>1)return c;throw d=!0,r}return function(a,u,f){if(l>1)throw TypeError("Generator is already running");for(d&&1===u&&p(u,f),i=u,s=f;(t=i<2?e:s)||!d;){o||(i?i<3?(i>1&&(m.n=-1),p(i,s)):m.n=s:m.v=s);try{if(l=2,o){if(i||(a="next"),t=o[a]){if(!(t=t.call(o,s)))throw TypeError("iterator result is not an object");if(!t.done)return t;s=t.value,i<2&&(i=0)}else 1===i&&(t=o.return)&&t.call(o),i<2&&(s=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((t=(d=m.n<0)?s:n.call(r,m))!==c)break}catch(t){o=e,i=1,s=t}finally{l=1}}return{value:t,done:d}}}(n,a,o),!0),l}var c={};function i(){}function s(){}function l(){}t=Object.getPrototypeOf;var u=[][r]?t(t([][r]())):(w(t={},r,function(){return this}),t),d=l.prototype=i.prototype=Object.create(u);function m(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,l):(e.__proto__=l,w(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return s.prototype=l,w(d,"constructor",l),w(l,"constructor",s),s.displayName="GeneratorFunction",w(l,a,"GeneratorFunction"),w(d),w(d,a,"Generator"),w(d,r,function(){return this}),w(d,"toString",function(){return"[object Generator]"}),(E=function(){return{w:o,m}})()}function w(e,t,n,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}w=function(e,t,n,r){function o(t,n){w(e,t,function(e){return this._invoke(t,n,e)})}t?a?a(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n:(o("next",0),o("throw",1),o("return",2))},w(e,t,n,r)}function x(e,t){this.v=e,this.k=t}function N(e,t,n,r,a,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function S(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var o=e.apply(t,n);function c(e){N(o,r,a,c,i,"next",e)}function i(e){N(o,r,a,c,i,"throw",e)}c(void 0)})}}var k=null,_=!1,I=(0,a.xG)(),L=fetch("/status",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"same-origin"}).then(function(e){return e.json()}).then(function(e){null!=e&&e.userData&&(k=e.userData,_=e.guest,e.party_id&&!I&&(console.log("User is in party:",e.party_id),window.location.href="/party/".concat(e.party_id)))}).catch(function(e){return console.error("Error fetching /status:",e)});function j(){return(j=S(v().mark(function e(t){var n,o,c,i,s;return v().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("In a party:",t),e.prev=1,e.next=4,fetch("/partydata",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"same-origin",body:JSON.stringify({partyId:t})});case 4:if((c=e.sent).ok){e.next=19;break}if(409!==c.status){e.next=18;break}return e.prev=7,e.next=10,c.json();case 10:if(!(i=e.sent).redirect){e.next=14;break}return window.location.href=i.redirect,e.abrupt("return");case 14:e.next=18;break;case 16:e.prev=16,e.t0=e.catch(7);case 18:throw new Error("Failed to fetch party data");case 19:return e.next=21,c.json();case 21:null!=(s=e.sent)&&s.members&&(0,a.mZ)({partyId:t,members:s.members,mode:null==s||null===(n=s.party)||void 0===n?void 0:n.mode,map:null==s||null===(o=s.party)||void 0===o?void 0:o.map}),(0,r.w)("Joined party",void 0,void 0,void 0,{duration:1500}),e.next=29;break;case 26:e.prev=26,e.t1=e.catch(1),console.error("Error:",e.t1);case 29:case"end":return e.stop()}},e,null,[[1,26],[7,16]])}))).apply(this,arguments)}function O(e){var t=document.getElementById("sign-out"),n=document.getElementById("login");e?(t.textContent="Sign Up",t.addEventListener("click",function(){return window.location.href="/signup"}),n.addEventListener("click",function(){return window.location.href="/login"})):(t.addEventListener("click",function(){window.location.href="/signed-out"}),n.style.display="none")}function P(e){var t=String(e);document.body.style.backgroundImage="2"===t?'url("/assets/Mangrove/lobbyBg.jpg")':'url("/assets/Lushy/lobbyBg.jpg")'}I&&L.then(function(){k&&function(e){j.apply(this,arguments)}(I)}),document.addEventListener("DOMContentLoaded",S(v().mark(function e(){var t,n,o,c,i,l,d,m,p,f,h;return v().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,L;case 2:if(k){e.next=4;break}return e.abrupt("return");case 4:O(_),t=document.getElementById("sprite"),document.getElementById("your-slot-1"),n=document.getElementById("create-party"),o=document.querySelectorAll(".invite"),c=document.getElementById("coin-count"),i=document.getElementById("gem-count"),document.getElementById("username-text").textContent=k.name,P("1"),t.src="/assets/".concat(k.char_class,"/body.png");try{t.classList.remove("random")}catch(e){}c.textContent=k.coins,i.textContent=k.gems,s(k),(l=document.getElementById("lobby-area"))&&l.addEventListener("click",function(e){var t=e.target.closest&&e.target.closest(".character-slot");t&&"true"===t.dataset.isCurrentUser&&u()}),document.querySelectorAll(".switch-character").forEach(function(e){e.style.display="none"}),(0,a.n5)(),I?(n.textContent="Leave Party",n.style.background="linear-gradient(135deg, #d63939, #cf4545)",n.addEventListener("click",a.MX),(0,a.G$)(),o.forEach(function(e){"Invite"===e.textContent.trim()&&(e.style.display="",e.style.cursor="pointer",e.dataset.inviteLink=window.location.href)}),(d=document.getElementById("lobby-area"))&&d.addEventListener("click",function(e){var t=e.target&&e.target.closest&&e.target.closest(".invite");if(t&&I){var n=t.dataset.inviteLink||window.location.href;navigator.clipboard.writeText(n),(0,r.w)("Invite link copied to clipboard","Share this with your friends to invite them to the party",void 0,void 0,{duration:2e3})}})):(n.addEventListener("click",a.XQ),o.forEach(function(e){e.style.display="none",e.style.cursor="default"}),(m=document.getElementById("your-slot-1"))&&(m.dataset.isCurrentUser="true",(p=m.querySelector(".switch-character"))&&(p.style.display=""),(f=m.querySelector(".username"))&&(f.textContent=k.name),(h=m.querySelector(".character-sprite"))&&h.classList.remove("random"),m.className="character-slot player-display",m.dataset.character=k.char_class||"ninja"));case 23:case"end":return e.stop()}},e)})))},124:(e,t,n)=>{function r(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"OK",r=arguments.length>3?arguments[3]:void 0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},o=Math.max(800,Number(a.duration||5e3)),c=a.containerId||"sonner-wrap",i=document.getElementById(c);i||((i=document.createElement("div")).id=c,i.className="sonner-wrap",document.body.appendChild(i));var s=document.createElement("div");s.className="sonner",s.setAttribute("role","alert"),s.setAttribute("aria-live","polite"),s.innerHTML='\n    <div class="sonner__content">\n      <div class="sonner__hdr"></div>\n      <div class="sonner__msg"></div>\n    </div>\n    <div class="sonner__actions"></div>\n    <div class="sonner__progress"></div>\n  ',s.querySelector(".sonner__hdr").textContent=String(null!=e?e:""),s.querySelector(".sonner__msg").textContent=String(null!=t?t:"");var l=document.createElement("button");l.className="sonner__btn",l.textContent=String(null!=n?n:"OK");var u=!1,d=null,m=function(){u||(u=!0,s.classList.remove("show"),setTimeout(function(){s.remove(),i.children.length||i.remove()},280),d&&clearTimeout(d))};l.addEventListener("click",function(){try{"function"==typeof r?r(m):m()}catch(e){m()}}),s.querySelector(".sonner__actions").appendChild(l);var p=s.querySelector(".sonner__progress");return p.style.setProperty("--sonner-duration",o+"ms"),i.insertBefore(s,i.firstChild||null),requestAnimationFrame(function(){s.classList.add("show"),p.classList.add("anim")}),d=setTimeout(m,o),{close:m,el:s}}n.d(t,{w:()=>r})},903:(e,t,n)=>{n.d(t,{xG:()=>b,XQ:()=>C,n5:()=>_,MX:()=>E,mZ:()=>N,G$:()=>x});var r=n(124);const a=window.io({withCredentials:!0,autoConnect:!0});var o,c=n(73);function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function s(){var e=f(),t=e.m(s),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function o(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,a[e],t)},delegateYield:function(e,a,o){return t.resultName=a,n(r.d,l(e),o)},finish:function(e){return n(r.f,e)}},n=function(e,n,a){r.p=t.prev,r.n=t.next;try{return e(n,a)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(s=function(){return{wrap:function(t,n,r,a){return e.w(o(t),n,r,a&&a.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new h(e,t)},AsyncIterator:p,async:function(e,t,n,a,c){return(r(t)?m:d)(o(e),t,n,a,c)},keys:u,values:l}})()}function l(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(i(e)+" is not iterable")}function u(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function d(e,t,n,r,a){var o=m(e,t,n,r,a);return o.next().then(function(e){return e.done?e.value:o.next()})}function m(e,t,n,r,a){return new p(f().w(e,t,n,r),a||Promise)}function p(e,t){function n(r,a,o,c){try{var i=e[r](a),s=i.value;return s instanceof h?t.resolve(s.v).then(function(e){n("next",e,o,c)},function(e){n("throw",e,o,c)}):t.resolve(s).then(function(e){i.value=e,o(i)},function(e){return n("throw",e,o,c)})}catch(e){c(e)}}var r;this.next||(v(p.prototype),v(p.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),v(this,"_invoke",function(e,a,o){function c(){return new t(function(t,r){n(e,o,t,r)})}return r=r?r.then(c,c):c()},!0)}function f(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",a=n.toStringTag||"@@toStringTag";function o(n,r,a,o){var s=r&&r.prototype instanceof i?r:i,l=Object.create(s.prototype);return v(l,"_invoke",function(n,r,a){var o,i,s,l=0,u=a||[],d=!1,m={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(t,n){return o=t,i=0,s=e,m.n=n,c}};function p(n,r){for(i=n,s=r,t=0;!d&&l&&!a&&t<u.length;t++){var a,o=u[t],p=m.p,f=o[2];n>3?(a=f===r)&&(s=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=n<2&&p<o[1])?(i=0,m.v=r,m.n=o[1]):p<f&&(a=n<3||o[0]>r||r>f)&&(o[4]=n,o[5]=r,m.n=f,i=0))}if(a||n>1)return c;throw d=!0,r}return function(a,u,f){if(l>1)throw TypeError("Generator is already running");for(d&&1===u&&p(u,f),i=u,s=f;(t=i<2?e:s)||!d;){o||(i?i<3?(i>1&&(m.n=-1),p(i,s)):m.n=s:m.v=s);try{if(l=2,o){if(i||(a="next"),t=o[a]){if(!(t=t.call(o,s)))throw TypeError("iterator result is not an object");if(!t.done)return t;s=t.value,i<2&&(i=0)}else 1===i&&(t=o.return)&&t.call(o),i<2&&(s=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((t=(d=m.n<0)?s:n.call(r,m))!==c)break}catch(t){o=e,i=1,s=t}finally{l=1}}return{value:t,done:d}}}(n,a,o),!0),l}var c={};function i(){}function s(){}function l(){}t=Object.getPrototypeOf;var u=[][r]?t(t([][r]())):(v(t={},r,function(){return this}),t),d=l.prototype=i.prototype=Object.create(u);function m(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,l):(e.__proto__=l,v(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return s.prototype=l,v(d,"constructor",l),v(l,"constructor",s),s.displayName="GeneratorFunction",v(l,a,"GeneratorFunction"),v(d),v(d,a,"Generator"),v(d,r,function(){return this}),v(d,"toString",function(){return"[object Generator]"}),(f=function(){return{w:o,m}})()}function v(e,t,n,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}v=function(e,t,n,r){function o(t,n){v(e,t,function(e){return this._invoke(t,n,e)})}t?a?a(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n:(o("next",0),o("throw",1),o("return",2))},v(e,t,n,r)}function h(e,t){this.v=e,this.k=t}function y(e,t,n,r,a,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function g(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function b(){var e=window.location.pathname;return!!e.includes("party")&&e.split("/").filter(Boolean).pop()}function C(){fetch("/create-party",{method:"POST",headers:{"Content-Type":"application/json"}}).then(function(e){return e.json()}).then(function(e){window.location.href="/party/".concat(e.partyId)}).catch(function(e){console.error("Error:",e)})}function E(){fetch("/leave-party",{method:"POST",headers:{"Content-Type":"application/json"}}).then(function(e){return e.json()}).then(function(e){console.log(e),window.location.href="/"}).catch(function(e){console.error("Error:",e)})}function w(){clearInterval(o)}function x(){var e=b();a.on("connect",function(){console.log("[socket] connected",a.id)}),a.on("disconnect",function(e){console.log("[socket] disconnected",e),w()});var t=!1;function n(){if(!t){t=!0;try{a.emit("client:bye")}catch(e){}}}window.addEventListener("beforeunload",n),window.addEventListener("pagehide",n,{once:!0}),a.on("party:joined",function(e){var t=e.partyId;console.log("[socket] joined room",null!=t?t:"lobby"),t?function(e){clearInterval(o),e&&(o=setInterval(function(){return a.emit("heartbeat",e)},1e4))}(t):w()}),a.on("party:members",function(t){try{if(console.log("[party] party:members",{partyId:null==t?void 0:t.partyId,mode:null==t?void 0:t.mode,membersCount:Array.isArray(null==t?void 0:t.members)?t.members.length:0}),e&&String(t.partyId)!==String(e))return;var n=document.getElementById("mode");n&&t.mode&&(n.value=String(t.mode));var r=document.getElementById("map");r&&t.map&&(r.value=String(t.map)),N(t)}catch(e){console.warn("[socket] party:members render failed",e)}}),a.on("status:update",function(t){if(!e||String(t.partyId)===String(e)){var n,r=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return g(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,c=!0,i=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return c=e.done,e},e:function(e){i=!0,o=e},f:function(){try{c||null==n.return||n.return()}finally{if(i)throw o}}}}(document.querySelectorAll(".character-slot"));try{for(r.s();!(n=r.n()).done;){var a=n.value;if(a){var o=a.querySelector(".username"),c=a.querySelector(".status");if(o&&c){var i=o.textContent||"";i!==t.name&&i!=="".concat(t.name," (You)")||(c.textContent=t.status||"Not Ready",c.className="status ".concat(k(t.status)))}}}}catch(e){r.e(e)}finally{r.f()}}}),a.on("mode-change",function(t){if(!e||String(t.partyId)===String(e)){var n=document.getElementById("mode");n&&(n.value=t.selectedValue||t.mode),I(t.selectedValue||t.mode),t.members&&N({partyId:e,members:t.members,mode:t.selectedValue||t.mode,map:t.map})}}),a.on("map-change",function(t){if(!e||String(t.partyId)===String(e)){var n=document.getElementById("map");n&&(n.value=t.selectedValue||t.map),(0,c.R)(t.selectedValue||t.map)}})}function N(e){var t,n=Array.isArray(e.members)?e.members:[],r=(null===(t=document.getElementById("username-text"))||void 0===t?void 0:t.textContent)||"";e.mode&&I(e.mode),console.log("[party] renderPartyMembers()",{partyId:null==e?void 0:e.partyId,mode:null==e?void 0:e.mode,currentUserName:r,members:n.map(function(e){return{name:null==e?void 0:e.name,team:null==e?void 0:e.team,status:null==e?void 0:e.status,char_class:null==e?void 0:e.char_class}})});var a=document.querySelectorAll(".character-slot");if(console.log("[party] slots found:",a.length),a.forEach(function(e){O(e)}),n.length>0){var o,c,i=n.find(function(e){return e.name===r}),s=i?i.team:"team1",l=n.filter(function(e){return"team1"===e.team}),u=n.filter(function(e){return"team2"===e.team});console.log("[party] team split",{yourTeam:s,team1:l.map(function(e){return e.name}),team2:u.map(function(e){return e.name})}),"team1"===s?(o=l,c=u):(o=u,c=l),o.forEach(function(e,t){S(e,"your-slot-".concat(t+1),!0)}),c.forEach(function(e,t){S(e,"op-slot-".concat(t+1),!1)})}}function S(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=document.getElementById(t);if(a){if(console.log("[party] applyMemberToSlot",{slotId:t,memberName:null==e?void 0:e.name,isYourTeam:r}),a){var o=a.querySelector(".username"),c=a.querySelector(".character-sprite"),i=a.querySelector(".status");if(e){var s=(null===(n=document.getElementById("username-text"))||void 0===n?void 0:n.textContent)||"",l=e.name===s,u=l?"".concat(e.name," (You)"):e.name;if(a.dataset.isCurrentUser=l?"true":"false",o&&(o.textContent=u,o.className=r?"username":"username op-player"),c){var d=e.char_class||"ninja";c.src="/assets/".concat(d,"/body.png"),c.alt=d,c.classList.remove("random"),c.className="character-sprite"}if(i){var m=e.status||"Not Ready";i.textContent=m,i.className="status ".concat(k(m)),i.style.pointerEvents="",i.style.cursor=""}var p=a.querySelector(".switch-character");if(l){if(!p){(p=document.createElement("div")).className="switch-character";var f=document.createElement("img");f.src="/assets/switch.svg",f.alt="",f.height=18,p.appendChild(f),a.insertBefore(p,a.firstChild)}p.style.display=""}else p&&(p.style.display="none");null===r&&(r=l),a.className="character-slot ".concat(r?"player-display":"op-display"),a.dataset.character=e.char_class||"ninja",a.style.pointerEvents="auto",a.style.cursor=l?"pointer":"default"}else O(a)}}else console.warn("[party] applyMemberToSlot: slot not found",{slotId:t,member:e})}function k(e){var t=String(e||"").toLowerCase();return"online"===t||t.includes("ready")||t.includes("battle")?"ready":"not-ready"}function _(){var e=document.getElementById("mode"),t=document.getElementById("map"),n=b();if(e){var o=e.value;e.addEventListener("change",function(){var t,c=(t=s().mark(function t(c){var i,l,u,d,m;return s().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(l=c.target.value,u=null===(i=document.getElementById("username-text"))||void 0===i?void 0:i.textContent,!n){t.next=29;break}return t.prev=3,t.next=6,fetch("/party-members",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({partyId:n})});case 6:if((d=t.sent).ok){t.next=9;break}throw new Error("Failed to fetch party members");case 9:return t.next=11,d.json();case 11:if(m=t.sent,!(2*Number(l)<m.membersCount)){t.next=17;break}return(0,r.w)("Too many players for this mode!","Please remove 1 or more players before changing to this mode","error"),e.value=o,t.abrupt("return");case 17:I(l),a.emit("mode-change",{selectedValue:l,username:u,partyId:n,members:m.members}),o=l,t.next=27;break;case 22:t.prev=22,t.t0=t.catch(3),console.error("Error changing mode:",t.t0),(0,r.w)("Failed to change mode","Please try again. If the problem persists, try refreshing the page.","error"),e.value=o;case 27:t.next=31;break;case 29:I(l),o=l;case 31:case"end":return t.stop()}},t,null,[[3,22]])}),function(){var e=this,n=arguments;return new Promise(function(r,a){var o=t.apply(e,n);function c(e){y(o,r,a,c,i,"next",e)}function i(e){y(o,r,a,c,i,"throw",e)}c(void 0)})});return function(e){return c.apply(this,arguments)}}()),t&&t.addEventListener("change",function(e){var t,r=e.target.value,o=null===(t=document.getElementById("username-text"))||void 0===t?void 0:t.textContent;(0,c.R)(r),n&&a.emit("map-change",{selectedValue:r,username:o,partyId:n})})}}function I(e){var t=document.getElementById("lobby-area");if(t){var n=Number(e)||1;console.log("[party] updatePlatformsForMode",{mode:e,targetCount:n}),t.className="mode-".concat(n);var r=document.querySelectorAll('.platform[data-team="your-team"]'),a=document.querySelectorAll('.platform[data-team="op-team"]');if(console.log("[party] platform counts",{your:r.length,op:a.length}),r.length>n)for(var o=r.length-1;o>=n;o--)console.log("[party] removing platform index",o+1),r[o].remove(),a[o].remove();if(r.length<n)for(var c=r.length+1;c<=n;c++)console.log("[party] creating platforms for slot",c),L("your-team",c),L("op-team",c)}}function L(e,t){var n=document.getElementById("lobby-area");if(n){console.log("[party] createPlatform",{team:e,slotNumber:t});var r=document.createElement("div");r.className="platform ".concat(e,"-").concat(t),r.setAttribute("data-team",e),r.setAttribute("data-slot",t);var a=document.createElement("div");if(a.className="character-slot empty",a.id="".concat("your-team"===e?"your":"op","-slot-").concat(t),a.dataset.isCurrentUser="false","your-team"===e){var o=document.createElement("div");o.className="switch-character",o.style.display="none";var c=document.createElement("img");c.src="/assets/switch.svg",c.alt="",c.height=18,o.appendChild(c),a.appendChild(o)}var i=document.createElement("div");i.className="op-team"===e?"username op-player":"username",i.textContent="Random";var s=document.createElement("img");s.className="character-sprite random",s.src="/assets/random.png",s.alt="Random";var l=document.createElement("div");l.className="status invite",l.textContent="Invite",l.style.cursor="pointer",l.style.pointerEvents="auto",l.addEventListener("click",function(e){e.stopPropagation(),l.classList.contains("invite")&&(j(),l.textContent="Copied!",setTimeout(function(){l.textContent="Invite"},1e3))}),a.appendChild(i),a.appendChild(s),a.appendChild(l),r.appendChild(a);var u=document.createElement("div");u.className="platform-image",r.appendChild(u),n.appendChild(r)}}function j(){navigator.clipboard&&navigator.clipboard.writeText(window.location.href).then(function(){console.log("Invite link copied to clipboard")}).catch(function(e){console.error("Failed to copy text:",e)})}function O(e){if(e){var t=e.id;console.log("[party] resetSlotToRandom",{id:t});var n=e.querySelector(".username"),r=e.querySelector(".character-sprite"),a=e.querySelector(".status");if(n&&r&&a){n.textContent="Random",r.src="/assets/random.png",r.alt="Random",r.classList.add("random"),a.className="status invite",a.textContent="Invite",a.style.cursor="pointer",a.style.pointerEvents="auto",e.className="character-slot empty",e.dataset.character="Random",e.dataset.isCurrentUser="false";var o=e.querySelector(".switch-character");o&&(o.style.display="none");var c=a.cloneNode(!0);a.parentNode.replaceChild(c,a),c.addEventListener("click",function(e){e.stopPropagation(),c.classList.contains("invite")&&(j(),c.textContent="Copied!",setTimeout(function(){c.textContent="Invite"},1e3))})}}}"undefined"!=typeof window&&(window.__partyDebug={testRender:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:2;N({partyId:"debug",mode:t,members:[{name:(null===(e=document.getElementById("username-text"))||void 0===e?void 0:e.textContent)||"You",team:"team1",status:"Online",char_class:"ninja"},{name:"Ally",team:"team1",status:"Not Ready",char_class:"wizard"},{name:"Enemy1",team:"team2",status:"Ready",char_class:"draven"},{name:"Enemy2",team:"team2",status:"Online",char_class:"thorg"}].slice(0,2*t)})}})},915:(e,t,n)=>{n.d(t,{Mg:()=>r,NB:()=>l,O0:()=>u,Ug:()=>s,le:()=>i,w:()=>c,zH:()=>o}),e=n.hmd(e);var r=5,a={ninja:{baseHealth:8e3,attackDescription:"Unleashes a shuriken that boomerangs back.",baseDamage:1e3,ammoCooldownMs:200,ammoReloadMs:1400,ammoCapacity:1,specialDescription:"Dashes forward, releasing a flurry of shurikens.",specialBaseDamage:2e3,specialChargeHits:3,spriteScale:1,body:{widthShrink:35,heightShrink:10,offsetXFromHalf:0,offsetY:10},description:"A swift and agile fighter.",free:!0},thorg:{baseHealth:13e3,attackDescription:"Swings a heavy axe in a short arc, pushing back nearby enemies.",baseDamage:1800,ammoCooldownMs:350,ammoReloadMs:1e3,ammoCapacity:3,specialDescription:"Slams the ground to send a shockwave forward.",specialBaseDamage:2800,specialChargeHits:4,spriteScale:.7,body:{widthShrink:30,heightShrink:8,offsetXFromHalf:-43,offsetY:8},description:"A sturdy frontline bruiser with crushing blows.",free:!0},draven:{baseHealth:6e3,attackDescription:"Puffs out a magical smoke that deals splash baseDamage to everyone in the path.",baseDamage:1800,ammoCooldownMs:250,ammoReloadMs:1700,ammoCapacity:3,specialDescription:"Unleashes a staff nova that expands outward.",specialBaseDamage:2400,specialChargeHits:3,spriteScale:1.2,body:{widthShrink:220,heightShrink:195,offsetXFromHalf:90,offsetY:113,flipOffset:5},description:"A dark sorcerer who manipulates shadows.",unlockPrice:280}};function o(e){return a[e]||void 0}function c(){return Object.keys(a)}function i(e,t){return a[e].baseHealth+500*(t-1)}function s(e,t){return a[e].baseDamage+100*(t-1)}function l(e,t){return a[e].specialBaseDamage+200*(t-1)}function u(e){return 200*Math.pow(2,e-1)}e.exports&&(e.exports={DEFAULT_CHARACTER:"ninja",LEVEL_CAP:r,characterStats:a,defaultCharacterList:function(){return Object.fromEntries(Object.keys(a).map(function(e){return[e,a[e].free?1:0]}))},upgradePrice:u,unlockPrice:function(e){return a[e].unlockPrice||void 0}})}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r](o,o.exports,n),o.loaded=!0,o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n(73)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
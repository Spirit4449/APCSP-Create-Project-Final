/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!************************!*\
  !*** ./src/welcome.js ***!
  \************************/
document.addEventListener("DOMContentLoaded", function () {
  var nameForm = document.getElementById("nameForm");
  var nameInput = document.getElementById("nameInput");

  // Handle form submission
  nameForm.addEventListener("submit", function (event) {
    event.preventDefault(); // Prevent default form submission behavior
    submitForm();
  });

  // Handle enter key press
  nameInput.addEventListener("keypress", function (event) {
    if (event.key === "Enter") {
      event.preventDefault(); // Prevent default form submission behavior
      submitForm();
    }
  });
  function submitForm() {
    var name = nameInput.value;
    if (name.trim() === "") {
      alert("Please enter your name.");
    } else {
      // Perform further actions, like sending the name to the server
      fetch("/create-name", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          name: name
        })
      }).then(function (response) {
        if (response.ok) {
          createCookie("name", name);
          if (document.referrer) {
            window.location.href = document.referrer;
          } else {
            window.location.href = "/";
          }
        } else {
          alert('Name already taken!');
        }
      })["catch"](function (error) {
        console.error("Error:", error);
      });
    }
  }
});
function createCookie(cookieName, cookieValue) {
  var date = new Date();
  // Set expiration date to one month from now
  date.setTime(date.getTime() + 30 * 24 * 60 * 60 * 1000);
  var expires = "expires=" + date.toUTCString();
  // Set the cookie with the provided name, value, and expiration date
  document.cookie = cookieName + "=" + cookieValue + ";" + expires + ";path=/";
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VsY29tZS5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQUEsUUFBUSxDQUFDQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxZQUFZO0VBQ3hELElBQU1DLFFBQVEsR0FBR0YsUUFBUSxDQUFDRyxjQUFjLENBQUMsVUFBVSxDQUFDO0VBQ3BELElBQU1DLFNBQVMsR0FBR0osUUFBUSxDQUFDRyxjQUFjLENBQUMsV0FBVyxDQUFDOztFQUV0RDtFQUNBRCxRQUFRLENBQUNELGdCQUFnQixDQUFDLFFBQVEsRUFBRSxVQUFVSSxLQUFLLEVBQUU7SUFDbkRBLEtBQUssQ0FBQ0MsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hCQyxVQUFVLENBQUMsQ0FBQztFQUNkLENBQUMsQ0FBQzs7RUFFRjtFQUNBSCxTQUFTLENBQUNILGdCQUFnQixDQUFDLFVBQVUsRUFBRSxVQUFVSSxLQUFLLEVBQUU7SUFDdEQsSUFBSUEsS0FBSyxDQUFDRyxHQUFHLEtBQUssT0FBTyxFQUFFO01BQ3pCSCxLQUFLLENBQUNDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUN4QkMsVUFBVSxDQUFDLENBQUM7SUFDZDtFQUNGLENBQUMsQ0FBQztFQUVGLFNBQVNBLFVBQVVBLENBQUEsRUFBRztJQUNwQixJQUFNRSxJQUFJLEdBQUdMLFNBQVMsQ0FBQ00sS0FBSztJQUM1QixJQUFJRCxJQUFJLENBQUNFLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO01BQ3RCQyxLQUFLLENBQUMseUJBQXlCLENBQUM7SUFDbEMsQ0FBQyxNQUFNO01BQ0w7TUFDQUMsS0FBSyxDQUFDLGNBQWMsRUFBRTtRQUNwQkMsTUFBTSxFQUFFLE1BQU07UUFDZEMsT0FBTyxFQUFFO1VBQ1AsY0FBYyxFQUFFO1FBQ2xCLENBQUM7UUFDREMsSUFBSSxFQUFFQyxJQUFJLENBQUNDLFNBQVMsQ0FBQztVQUFFVCxJQUFJLEVBQUpBO1FBQUssQ0FBQztNQUMvQixDQUFDLENBQUMsQ0FDQ1UsSUFBSSxDQUFDLFVBQUNDLFFBQVEsRUFBSztRQUNsQixJQUFJQSxRQUFRLENBQUNDLEVBQUUsRUFBRTtVQUNmQyxZQUFZLENBQUMsTUFBTSxFQUFFYixJQUFJLENBQUM7VUFDMUIsSUFBSVQsUUFBUSxDQUFDdUIsUUFBUSxFQUFFO1lBQ25CQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxHQUFHMUIsUUFBUSxDQUFDdUIsUUFBUTtVQUM1QyxDQUFDLE1BQU07WUFDSEMsTUFBTSxDQUFDQyxRQUFRLENBQUNDLElBQUksR0FBRyxHQUFHO1VBQzlCO1FBQ0YsQ0FBQyxNQUFNO1VBQ0xkLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQztRQUM5QjtNQUNGLENBQUMsQ0FBQyxTQUNJLENBQUMsVUFBQ2UsS0FBSyxFQUFLO1FBQ2hCQyxPQUFPLENBQUNELEtBQUssQ0FBQyxRQUFRLEVBQUVBLEtBQUssQ0FBQztNQUNoQyxDQUFDLENBQUM7SUFDTjtFQUNGO0FBQ0YsQ0FBQyxDQUFDO0FBQ0YsU0FBU0wsWUFBWUEsQ0FBQ08sVUFBVSxFQUFFQyxXQUFXLEVBQUU7RUFDN0MsSUFBTUMsSUFBSSxHQUFHLElBQUlDLElBQUksQ0FBQyxDQUFDO0VBQ3ZCO0VBQ0FELElBQUksQ0FBQ0UsT0FBTyxDQUFDRixJQUFJLENBQUNHLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztFQUN2RCxJQUFNQyxPQUFPLEdBQUcsVUFBVSxHQUFHSixJQUFJLENBQUNLLFdBQVcsQ0FBQyxDQUFDO0VBQy9DO0VBQ0FwQyxRQUFRLENBQUNxQyxNQUFNLEdBQUdSLFVBQVUsR0FBRyxHQUFHLEdBQUdDLFdBQVcsR0FBRyxHQUFHLEdBQUdLLE9BQU8sR0FBRyxTQUFTO0FBQzlFLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcGNzcC1jcmVhdGUtcHJvamVjdC0tLWZpbmFsLy4vc3JjL3dlbGNvbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gKCkge1xyXG4gIGNvbnN0IG5hbWVGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lRm9ybVwiKTtcclxuICBjb25zdCBuYW1lSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hbWVJbnB1dFwiKTtcclxuXHJcbiAgLy8gSGFuZGxlIGZvcm0gc3VibWlzc2lvblxyXG4gIG5hbWVGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBQcmV2ZW50IGRlZmF1bHQgZm9ybSBzdWJtaXNzaW9uIGJlaGF2aW9yXHJcbiAgICBzdWJtaXRGb3JtKCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIEhhbmRsZSBlbnRlciBrZXkgcHJlc3NcclxuICBuYW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFByZXZlbnQgZGVmYXVsdCBmb3JtIHN1Ym1pc3Npb24gYmVoYXZpb3JcclxuICAgICAgc3VibWl0Rm9ybSgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBzdWJtaXRGb3JtKCkge1xyXG4gICAgY29uc3QgbmFtZSA9IG5hbWVJbnB1dC52YWx1ZTtcclxuICAgIGlmIChuYW1lLnRyaW0oKSA9PT0gXCJcIikge1xyXG4gICAgICBhbGVydChcIlBsZWFzZSBlbnRlciB5b3VyIG5hbWUuXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gUGVyZm9ybSBmdXJ0aGVyIGFjdGlvbnMsIGxpa2Ugc2VuZGluZyB0aGUgbmFtZSB0byB0aGUgc2VydmVyXHJcbiAgICAgIGZldGNoKFwiL2NyZWF0ZS1uYW1lXCIsIHtcclxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBuYW1lIH0pLFxyXG4gICAgICB9KVxyXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgIGNyZWF0ZUNvb2tpZShcIm5hbWVcIiwgbmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWZlcnJlcikge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBkb2N1bWVudC5yZWZlcnJlcjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KCdOYW1lIGFscmVhZHkgdGFrZW4hJylcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUNvb2tpZShjb29raWVOYW1lLCBjb29raWVWYWx1ZSkge1xyXG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gIC8vIFNldCBleHBpcmF0aW9uIGRhdGUgdG8gb25lIG1vbnRoIGZyb20gbm93XHJcbiAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcclxuICBjb25zdCBleHBpcmVzID0gXCJleHBpcmVzPVwiICsgZGF0ZS50b1VUQ1N0cmluZygpO1xyXG4gIC8vIFNldCB0aGUgY29va2llIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUsIHZhbHVlLCBhbmQgZXhwaXJhdGlvbiBkYXRlXHJcbiAgZG9jdW1lbnQuY29va2llID0gY29va2llTmFtZSArIFwiPVwiICsgY29va2llVmFsdWUgKyBcIjtcIiArIGV4cGlyZXMgKyBcIjtwYXRoPS9cIjtcclxufVxyXG4iXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwibmFtZUZvcm0iLCJnZXRFbGVtZW50QnlJZCIsIm5hbWVJbnB1dCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzdWJtaXRGb3JtIiwia2V5IiwibmFtZSIsInZhbHVlIiwidHJpbSIsImFsZXJ0IiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsImNyZWF0ZUNvb2tpZSIsInJlZmVycmVyIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwiZXJyb3IiLCJjb25zb2xlIiwiY29va2llTmFtZSIsImNvb2tpZVZhbHVlIiwiZGF0ZSIsIkRhdGUiLCJzZXRUaW1lIiwiZ2V0VGltZSIsImV4cGlyZXMiLCJ0b1VUQ1N0cmluZyIsImNvb2tpZSJdLCJzb3VyY2VSb290IjoiIn0=